services:
  reverse_proxy:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 8088:80
      - 8080:8080
    volumes:
      - './util/traefik/rules.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  reverse_proxy_docker:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - './util/traefik/rules_docker.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  auth:
    profiles:
      - full
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
      args:
        COOKIE_DOMAIN: .klicker.com
        NEXT_PUBLIC_DEFAULT_REDIRECT: http://86.119.41.141:3002
        NEXTAUTH_URL: http://86.119.41.141:3010
        NODE_ENV: development
        # EDUID_CLIENT_ID: uzh_klicker_auth_dev
        # EDUID_WELL_KNOWN: https://login.test.eduid.ch/.well-known/openid-configuration
        # NEXT_PUBLIC_EDUID_ID: eduid-test
    environment:
      APP_SECRET: abcd
      DATABASE_URL: 'postgres://klicker:klicker@postgres:5432/main'
      NODE_ENV: development
      # EDUID_CLIENT_SECRET: ''
      # TEAMS_WEBHOOK_URL: ''
    ports:
      - 3010:3000
    networks:
      - klicker

  frontend_pwa:
    profiles:
      - full
    build:
      context: .
      dockerfile: apps/frontend-pwa/Dockerfile
      args:
        COOKIE_DOMAIN: .klicker.com
        NEXT_PUBLIC_ADD_RESPONSE_URL: 'http://func-responses.klicker.com/api/AddResponse'
        NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
        NEXT_PUBLIC_API_URL: 'http://86.119.41.141:3000/api/graphql'
        NEXT_PUBLIC_AVATAR_BASE_PATH: 'https://sos-ch-dk-2.exo.io/klicker-prod/avatars'
        NEXT_PUBLIC_CONTROL_URL: 'http://86.119.41.141:3003'
        NEXT_PUBLIC_IMAGE_BASE_PATH: 'https://sos-ch-dk-2.exo.io/klicker-prod/img'
        NEXT_PUBLIC_MANAGE_URL: 'http://86.119.41.141:3002'
        NEXT_PUBLIC_PWA_URL: 'http://86.119.41.141:3001'
        NODE_ENV: development
        # BLOB_STORAGE_ACCOUNT_URL: ''
        # NEXT_PUBLIC_WEB_PUSH_PUBLIC_KEY: ""
    environment:
      APP_SECRET: abcd
      NODE_ENV: development
    ports:
      - 3001:3000
    networks:
      - klicker

  frontend_manage:
    profiles:
      - full
    build:
      context: .
      dockerfile: apps/frontend-manage/Dockerfile
      args:
        COOKIE_DOMAIN: .klicker.com
        NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
        NEXT_PUBLIC_API_URL: 'http://86.119.41.141:3000/api/graphql'
        NEXT_PUBLIC_AUTH_URL: 'http://86.119.41.141:3010'
        NEXT_PUBLIC_AVATAR_BASE_PATH: 'https://sos-ch-dk-2.exo.io/klicker-prod/avatars'
        NEXT_PUBLIC_CONTROL_URL: 'http://86.119.41.141:3003'
        NEXT_PUBLIC_MANAGE_URL: 'http://86.119.41.141:3002
        NEXT_PUBLIC_PWA_URL: 'http://86.119.41.141:3001'
        NODE_ENV: development
        # BLOB_STORAGE_ACCOUNT_URL: ''
    environment:
      NODE_ENV: development
    ports:
      - 3002:3000
    networks:
      - klicker

  frontend_control:
    profiles:
      - full
    build:
      context: .
      dockerfile: apps/frontend-control/Dockerfile
      args:
        COOKIE_DOMAIN: .klicker.com
        NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
        NEXT_PUBLIC_API_URL: 'http://86.119.41.141:3000/api/graphql'
        NODE_ENV: development
        NEXT_PUBLIC_AVATAR_BASE_PATH: 'https://sos-ch-dk-2.exo.io/klicker-prod/avatars'
        NEXT_PUBLIC_PWA_URL: 'http://86.119.41.141:3001'
        NEXT_PUBLIC_MANAGE_URL: 'http://86.119.41.141:3002'
        NEXT_PUBLIC_CONTROL_URL: 'http://86.119.41.141:3003'
        # BLOB_STORAGE_ACCOUNT_URL: ''
    environment:
      NODE_ENV: development
    ports:
      - 3003:3000
    networks:
      - klicker

  backend:
    profiles:
      - full
    build:
      context: .
      dockerfile: apps/backend-docker/Dockerfile
      args:
        NODE_ENV: 'development'
    environment:
      APP_SECRET: 'abcd'
      COOKIE_DOMAIN: .klicker.com
      CRON_TOKEN: 'abcd'
      DATABASE_URL: 'postgres://klicker:klicker@postgres:5432/klicker'
      NODE_ENV: development
      NOTIFICATION_SUPPORT_MAIL: 'noone@klicker.com'
      NOTIFICATION_URL: 'noone@klicker.com'
      REDIS_CACHE_HOST: 'redis_cache'
      REDIS_CACHE_PASS: ''
      REDIS_CACHE_PORT: 6379
      REDIS_HOST: 'redis_exec'
      REDIS_PASS: ''
      REDIS_PORT: 6379
      # BLOB_STORAGE_ACCESS_KEY: ''
      # BLOB_STORAGE_ACCOUNT_NAME: ''
      # LISTMONK_TEMPLATE_MIGRATION_REQUEST: ''
      # LISTMONK_URL: ''
      # LISTMONK_USER: ''
      # MIGRATION_SERVICE_BUS_QUEUE_NAME: ''
      # NOTIFICATION_SECRET: ''
      # REDIS_CACHE_TLS: 'true'
      # REDIS_TLS: 'true'
      # TEAMS_WEBHOOK_URL: ''
      # VAPID_PRIVATE_KEY: ''
      # VAPID_PUBLIC_KEY: ''
    ports:
      - 3000:3000
    networks:
      - klicker

  # main database
  postgres:
    image: docker.io/library/postgres:15
    environment:
      POSTGRES_USER: klicker
      POSTGRES_PASSWORD: klicker
      POSTGRES_DB: klicker
    ports:
      - 5432:5432
    networks:
      - klicker
    volumes:
      - klicker_data:/var/lib/postgresql/data

    # redis instance to support session execution
  redis_exec:
    image: docker.io/library/redis:7
    ports:
      - 6379:6379
    networks:
      - klicker
    volumes:
      - redis_data:/data

  # redis instance for page caching and rate limiting
  redis_cache:
    image: docker.io/library/redis:7
    ports:
      - 6380:6379
    networks:
      - klicker

  # fake smtp server for catching email during development
  mailhog:
    image: docker.io/mailhog/mailhog:latest
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - klicker

  # service for transactional emails and newsletter campaigns
  # uses mailhog to send transactional emails during development
  listmonk:
    image: docker.io/listmonk/listmonk:latest
    ports:
      - 9000:9000
    environment:
      - TZ=Europe/Zurich
    depends_on:
      listmonk_db:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    volumes:
      - ./util/listmonk-config.toml:/listmonk/config.toml
    networks:
      - klicker
    command: [sh, -c, 'yes | ./listmonk --install && ./listmonk']

  listmonk_db:
    image: docker.io/library/postgres:13
    environment:
      - POSTGRES_PASSWORD=listmonk
      - POSTGRES_USER=listmonk
      - POSTGRES_DB=listmonk
    volumes:
      - listmonk_data:/var/lib/postgresql/data
    networks:
      - klicker
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U listmonk']
      interval: 10s
      timeout: 5s
      retries: 6

  mongodb:
    image: mongo:4.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: klicker
      MONGO_INITDB_ROOT_PASSWORD: klicker
    ports:
      - 27017:27017
    networks:
      - klicker
    volumes:
      - /data/db

networks:
  klicker:
    driver: bridge

volumes:
  listmonk_data:
  klicker_data:
  redis_data:
