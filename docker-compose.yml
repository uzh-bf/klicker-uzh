services:
  reverse_proxy:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 8088:80
      - 8080:8080
    volumes:
      - './util/traefik/rules.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  # main database
  postgres:
    image: docker.io/library/postgres:15
    environment:
      POSTGRES_USER: klicker
      POSTGRES_PASSWORD: klicker
      POSTGRES_DB: klicker
    ports:
      - 5432:5432
    networks:
      - klicker
    volumes:
      - klicker_data:/var/lib/postgresql/data

    # redis instance to support session execution
  redis_exec:
    image: docker.io/library/redis:7
    ports:
      - 6379:6379
    networks:
      - klicker
    volumes:
      - redis_data:/data

  # redis instance for page caching and rate limiting
  redis_cache:
    image: docker.io/library/redis:7
    ports:
      - 6380:6379
    networks:
      - klicker

  # fake smtp server for catching email during development
  mailhog:
    image: docker.io/mailhog/mailhog:latest
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - klicker

  # service for transactional emails and newsletter campaigns
  # uses mailhog to send transactional emails during development
  listmonk:
    image: docker.io/listmonk/listmonk:latest
    ports:
      - 9000:9000
    environment:
      - TZ=Europe/Zurich
    depends_on:
      listmonk_db:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    volumes:
      - ./util/listmonk-config.toml:/listmonk/config.toml
    networks:
      - klicker
    command: [sh, -c, 'yes | ./listmonk --install && ./listmonk']

  listmonk_db:
    image: docker.io/library/postgres:13
    environment:
      - POSTGRES_PASSWORD=listmonk
      - POSTGRES_USER=listmonk
      - POSTGRES_DB=listmonk
    volumes:
      - listmonk_data:/var/lib/postgresql/data
    networks:
      - klicker
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U listmonk']
      interval: 10s
      timeout: 5s
      retries: 6

  mongodb:
    image: mongo:4.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: klicker
      MONGO_INITDB_ROOT_PASSWORD: klicker
    ports:
      - 27017:27017
    networks:
      - klicker
    volumes:
      - /data/db

  # frontend_pwa:
  #   profiles:
  #     - full
  #   build:
  #     context: .
  #     dockerfile: apps/frontend-pwa/Dockerfile
  #     args:
  #       NODE_ENV: development
  #       COOKIE_DOMAIN: 127.0.0.1
  #       NEXT_PUBLIC_ADD_RESPONSE_URL: 'http://127.0.0.1:7072/api/AddResponse'
  #       NEXT_PUBLIC_API_URL: 'http://127.0.0.1:3000/api/graphql'
  #       NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
  #   environment:
  #     APP_SECRET: abcd
  #   ports:
  #     - 3001:3000
  #   networks:
  #     - klicker

  # frontend_manage:
  #   profiles:
  #     - full
  #   build:
  #     context: .
  #     dockerfile: apps/frontend-manage/Dockerfile
  #     args:
  #       NODE_ENV: development
  #       COOKIE_DOMAIN: 127.0.0.1
  #       NEXT_PUBLIC_API_URL: 'http://127.0.0.1:3000/api/graphql'
  #       NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
  #   ports:
  #     - 3002:3000
  #   networks:
  #     - klicker

  # frontend_control:
  #   profiles:
  #     - full
  #   build:
  #     context: .
  #     dockerfile: apps/frontend-control/Dockerfile
  #     args:
  #       NODE_ENV: development
  #       COOKIE_DOMAIN: 127.0.0.1
  #       NEXT_PUBLIC_API_URL: 'http://127.0.0.1:3000/api/graphql'
  #       NEXT_PUBLIC_API_URL_SSR: 'http://backend:3000/api/graphql'
  #   ports:
  #     - 3003:3000
  #   networks:
  #     - klicker

  # backend:
  #   profiles:
  #     - full
  #   build:
  #     context: .
  #     dockerfile: apps/backend-docker/Dockerfile
  #     args:
  #       NODE_ENV: 'development'
  #   environment:
  #     DATABASE_URL: 'postgres://klicker:klicker@postgres:5432/main'
  #     APP_SECRET: 'abcd'
  #     REDIS_HOST: 'redis_exec'
  #     REDIS_PORT: 6379
  #     REDIS_CACHE_HOST: 'redis_cache'
  #     REDIS_CACHE_PORT: 6379
  #     API_DOMAIN: '127.0.0.1'
  #     COOKIE_DOMAIN: '127.0.0.1'
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - klicker

networks:
  klicker:
    driver: bridge

volumes:
  listmonk_data:
  klicker_data:
  redis_data:
