services:
  reverse_proxy_docker:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - './util/traefik/rules_docker.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  reverse_proxy_wsl:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - './util/traefik/rules_wsl.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  reverse_proxy_wsl_jannis:
    image: docker.io/library/traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.file=true
      - --providers.file.filename=/etc/traefik/rules.yaml
      - --providers.file.watch=true
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - './util/traefik/rules_wsl_jannis.yaml:/etc/traefik/rules.yaml'
    networks:
      - klicker

  auth:
    profiles:
      - full
    image: ghcr.io/uzh-bf/klicker-uzh/auth:v3
    environment:
      APP_SECRET: abcd
      DATABASE_URL: 'postgres://klicker:klicker@postgres:5432/main'
      # EDUID_CLIENT_SECRET: ''
      # TEAMS_WEBHOOK_URL: ''
    ports:
      - 3010:3000
    networks:
      - klicker

  frontend_pwa:
    profiles:
      - full
    image: ghcr.io/uzh-bf/klicker-uzh/frontend-pwa:v3
    environment:
      APP_SECRET: abcd
    ports:
      - 3001:3000
    networks:
      - klicker

  frontend_manage:
    profiles:
      - full
    image: ghcr.io/uzh-bf/klicker-uzh/frontend-manage:v3
    ports:
      - 3002:3000
    networks:
      - klicker

  frontend_control:
    profiles:
      - full
    image: ghcr.io/uzh-bf/klicker-uzh/frontend-control:v3
    ports:
      - 3003:3000
    networks:
      - klicker

  backend:
    profiles:
      - full
    image: ghcr.io/uzh-bf/klicker-uzh/backend-docker:v3
    environment:
      APP_SECRET: 'abcd'
      COOKIE_DOMAIN: .klicker.com
      CRON_TOKEN: 'abcd'
      DATABASE_URL: 'postgres://klicker:klicker@postgres:5432/klicker'
      NOTIFICATION_SUPPORT_MAIL: 'noone@klicker.com'
      NOTIFICATION_URL: 'noone@klicker.com'
      REDIS_CACHE_HOST: 'redis_cache'
      REDIS_CACHE_PASS: ''
      REDIS_CACHE_PORT: 6379
      REDIS_HOST: 'redis_exec'
      REDIS_PASS: ''
      REDIS_PORT: 6379
      # BLOB_STORAGE_ACCESS_KEY: ''
      # BLOB_STORAGE_ACCOUNT_NAME: ''
      # LISTMONK_TEMPLATE_MIGRATION_REQUEST: ''
      # LISTMONK_URL: ''
      # LISTMONK_USER: ''
      # MIGRATION_SERVICE_BUS_QUEUE_NAME: ''
      # NOTIFICATION_SECRET: ''
      # REDIS_CACHE_TLS: 'true'
      # REDIS_TLS: 'true'
      # TEAMS_WEBHOOK_URL: ''
      # VAPID_PRIVATE_KEY: ''
      # VAPID_PUBLIC_KEY: ''
    ports:
      - 3000:3000
    networks:
      - klicker

  # main database
  postgres:
    image: docker.io/library/postgres:15
    environment:
      POSTGRES_USER: klicker
      POSTGRES_PASSWORD: klicker
      POSTGRES_DB: klicker-prod
    ports:
      - 5432:5432
    networks:
      - klicker
    volumes:
      - klicker_data:/var/lib/postgresql/data
      - ./util/init.sql:/docker-entrypoint-initdb.d/init.sql
    # redis instance to support session execution
  redis_exec:
    image: docker.io/library/redis:7
    ports:
      - 6379:6379
    networks:
      - klicker
    volumes:
      - redis_data:/data

  # redis instance for page caching and rate limiting
  redis_cache:
    image: docker.io/library/redis:7
    ports:
      - 6380:6379
    networks:
      - klicker

  # fake smtp server for catching email during development
  mailhog:
    image: docker.io/mailhog/mailhog:latest
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - klicker

  # service for transactional emails and newsletter campaigns
  # uses mailhog to send transactional emails during development
  listmonk:
    image: docker.io/listmonk/listmonk:latest
    ports:
      - 9000:9000
    environment:
      - TZ=Europe/Zurich
    depends_on:
      listmonk_db:
        condition: service_healthy
    volumes:
      - ./util/listmonk-config.toml:/listmonk/config.toml
    networks:
      - klicker
    command: [sh, -c, 'yes | ./listmonk --install && ./listmonk']

  listmonk_db:
    image: docker.io/library/postgres:13
    environment:
      - POSTGRES_PASSWORD=listmonk
      - POSTGRES_USER=listmonk
      - POSTGRES_DB=listmonk
    volumes:
      - listmonk_data:/var/lib/postgresql/data
    networks:
      - klicker
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U listmonk']
      interval: 10s
      timeout: 5s
      retries: 6

  mongodb:
    image: mongo:4.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: klicker
      MONGO_INITDB_ROOT_PASSWORD: klicker
    ports:
      - 27017:27017
    networks:
      - klicker
    volumes:
      - /data/db

networks:
  klicker:
    driver: bridge

volumes:
  listmonk_data:
  klicker_data:
  klicker_lti_data:
  redis_data:
  lti_data:
