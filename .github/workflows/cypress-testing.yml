name: Klicker automated testing with cypress
on:
  push:
    branches: ['v3']
  pull_request:
    branches: ["v3"]
    types: [opened, synchronize, reopened]
  # workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  # build-backend:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ github.repository }}/backend-docker

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: apps/backend-docker
  #         file: apps/backend-docker/Dockerfile
  #         tags: ${{ env.REGISTRY }}/${{ github.repository }}/backend-docker:cypress
  #         labels: ${{ steps.meta.outputs.labels }}

  # build-frontend-manage:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Replace .env.production with .env.cypress
  #       shell: bash
  #       run: |
  #         rm apps/frontend-manage/.env.production
  #         mv apps/frontend-manage/.env.cypress apps/frontend-manage/.env.production
  #         cp -R packages/shared-components apps/frontend-manage/shared-components

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend-manage

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: apps/frontend-manage
  #         file: apps/frontend-manage/Dockerfile
  #         tags: ${{ env.REGISTRY }}/${{ github.repository }}/frontend-manage:cypress
  #         labels: ${{ steps.meta.outputs.labels }}

  # build-frontend-pwa:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Replace .env.production with .env.cypress
  #       shell: bash
  #       run: |
  #         rm apps/frontend-pwa/.env.production
  #         mv apps/frontend-pwa/.env.cypress apps/frontend-pwa/.env.production
  #         cp -R packages/shared-components apps/frontend-pwa/shared-components

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ github.repository }}/frontend-pwa

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: apps/frontend-pwa
  #         file: apps/frontend-pwa/Dockerfile
  #         tags: ${{ env.REGISTRY }}/${{ github.repository }}/frontend-pwa:cypress
  #         labels: ${{ steps.meta.outputs.labels }}


  cypress-run:
    env:
       TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
       TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
       TURBO_REMOTE_ONLY: true

    # needs:
    #   - build-backend
    #   - build-frontend-manage
    #   - build-frontend-pwa

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: klicker
          POSTGRES_PASSWORD: klicker
          POSTGRES_DB: main
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis_cache:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379
      redis_exec:
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        image: redis:7
        ports:
          - 6379:6379

      # sendria:
      #   image: msztolcman/sendria:v2.2.2.0
      #   ports:
      #     - 1025:1025
      #     - 1080:1080
      # frontend-manage:
      #   image: ghcr.io/${{ github.repository }}/frontend-manage:v3.0.0-alpha.70
      #   credentials:
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #   ports:
      #     - 3002:3000
      # frontend-pwa:
      #   image: ghcr.io/${{ github.repository }}/frontend-pwa:v3.0.0-alpha.70
      #   credentials:
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #   ports:
      #     - 3001:3000
      # backend:
      #   image: ghcr.io/${{ github.repository }}/backend-docker:v3.0.0-alpha.70
      #   credentials:
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #   ports:
      #     - 3000:3000


    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false # https://github.com/cypress-io/github-action/issues/48
    #   matrix:
    #     containers: [1, 2] # Uses 2 parallel instances
    steps:
      - run: echo "ðŸŽ‰ The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Define node version
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Check out repository code
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/apps/frontend-pwa/.next/cache
            ${{ github.workspace }}/apps/frontend-manage/.next/cache
            ${{ github.workspace }}/apps/frontend-control/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        uses: bahmutov/npm-install@v1

      # - name: Install azure-functions-core-tools
      #   run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Prepare .env and local.settings.json files
        run: |
          mv packages/prisma/.env.template packages/prisma/.env
          mv apps/backend-docker/.env.template apps/backend-docker/.env
          echo "$FUNC_RESPONSES_SETTINGS" > apps/backend-responses/local.settings.json
          echo "$FUNC_RESPONSE_PROCESSOR_SETTINGS" > apps/backend-response-processor/local.settings.json
        env:
          FUNC_RESPONSES_SETTINGS: ${{ secrets.FUNC_RESPONSES_SETTINGS }}
          FUNC_RESPONSE_PROCESSOR_SETTINGS: ${{ secrets.FUNC_RESPONSE_PROCESSOR_SETTINGS }}

      - name: Apply migrations and seed the database
        run: |
          cd packages/prisma
          npm run build
          npm run prisma:reset:raw -- -f
          npm run seed:test

      - name: Cypress run
        uses: cypress-io/github-action@v5
        timeout-minutes: 20
        with:
          install: false
          start: npm run start:test
          wait-on: 'http://127.0.0.1:3000/api/graphql, http://127.0.0.1:3001, http://127.0.0.1:3002, http://127.0.0.1:3003'
          wait-on-timeout: 120
          record: true
          browser: chrome
        env:
          INITIAL_PASSWORD: "abcd"
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
