enum PublicationStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}

// ----- PRACTICE QUIZZES -----
// #region
enum ElementOrderType {
  SEQUENTIAL
  SPACED_REPETITION
}

model PracticeQuiz {
  id String @id @default(uuid()) @db.Uuid

  name             String
  displayName      String
  description      String?
  pointsMultiplier Int               @default(1)
  resetTimeDays    Int               @default(6)
  orderType        ElementOrderType  @default(SPACED_REPETITION)
  status           PublicationStatus @default(DRAFT)
  availableFrom    DateTime?

  stacks ElementStack[]

  responses       QuestionResponse[]
  responseDetails QuestionResponseDetail[]

  startedCount   Int @default(0) // >= completedCount (at least one answer given to quiz)
  completedCount Int @default(0) // >= repeatedCount (every instance answered at least once)
  repeatedCount  Int @default(0) // (every instance answered at least twice)

  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId  String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// ----- SESSIONS -----
// #region
enum SessionBlockStatus {
  SCHEDULED
  ACTIVE
  EXECUTED
}

model SessionBlock {
  id Int @id @default(autoincrement())

  originalId String? @unique

  order  Int
  status SessionBlockStatus @default(SCHEDULED)

  expiresAt       DateTime?
  timeLimit       Int?
  randomSelection Int?

  execution Int @default(0)

  instances QuestionInstance[]

  activeInSession LiveSession[] @relation(name: "ActiveSessionBlock")

  session   LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String      @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, order])
}

// TODO: delete after migration
enum SessionStatus {
  PREPARED
  SCHEDULED
  RUNNING
  COMPLETED
}

enum AccessMode {
  PUBLIC
  RESTRICTED
}

// TODO: delete after migration
model LiveSession {
  id String @id @default(uuid()) @db.Uuid

  originalId                 String? @unique
  isLiveQAEnabled            Boolean @default(false)
  isConfusionFeedbackEnabled Boolean @default(true)
  isModerationEnabled        Boolean @default(true)
  isGamificationEnabled      Boolean @default(false)
  isDeleted                  Boolean @default(false)

  namespace        String    @default(uuid()) @db.Uuid
  pinCode          Int?
  name             String
  displayName      String
  description      String?
  startedAt        DateTime?
  finishedAt       DateTime?
  linkTo           String?
  pointsMultiplier Int       @default(1)

  accessMode AccessMode    @default(PUBLIC)
  status     SessionStatus @default(PREPARED)

  activeBlock   SessionBlock? @relation(name: "ActiveSessionBlock", fields: [activeBlockId], references: [id])
  activeBlockId Int?

  blocks      SessionBlock[]
  leaderboard LeaderboardEntry[]

  feedbacks Feedback[]

  confusionFeedbacks ConfusionTimestep[]

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String @db.Uuid

  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  courseId String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LiveQuizStatus {
  PREPARED
  SCHEDULED
  RUNNING
  COMPLETED
}

model LiveQuiz {
  id String @id @default(uuid()) @db.Uuid

  originalId                 String? @unique
  isLiveQAEnabled            Boolean @default(false)
  isConfusionFeedbackEnabled Boolean @default(true)
  isModerationEnabled        Boolean @default(true)
  isGamificationEnabled      Boolean @default(false)
  isDeleted                  Boolean @default(false)

  namespace        String    @default(uuid()) @db.Uuid
  pinCode          Int?
  name             String
  displayName      String
  description      String?
  startedAt        DateTime?
  finishedAt       DateTime?
  // linkTo           String? // TODO: drop this functionality/field?
  pointsMultiplier Int       @default(1)

  accessMode AccessMode     @default(PUBLIC)
  status     LiveQuizStatus @default(PREPARED)

  activeStack   ElementStack? @relation(name: "ActiveElementStack", fields: [activeStackId], references: [id])
  activeStackId Int?

  stacks      ElementStack[]
  leaderboard LeaderboardEntry[]

  feedbacks Feedback[]

  confusionFeedbacks ConfusionTimestep[]

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String @db.Uuid

  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  courseId String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// ----- MICROLEARNING -----
// #region
model MicroLearning {
  id String @id @default(uuid()) @db.Uuid

  name             String
  displayName      String
  pointsMultiplier Int               @default(1)
  description      String?
  status           PublicationStatus @default(DRAFT)

  scheduledStartAt DateTime
  scheduledEndAt   DateTime

  arePushNotificationsSent Boolean @default(false)

  stacks ElementStack[]

  responses       QuestionResponse[]
  responseDetails QuestionResponseDetail[]

  startedCount   Int @default(0) // >= completedCount (at least one answer given to quiz)
  completedCount Int @default(0) // (every instance answered at least once)

  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId  String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// ----- GROUP ACTIVITIES -----
// #region
enum ParameterType {
  NUMBER
  STRING
}

model GroupActivityParameter {
  id Int @id @default(autoincrement())

  name        String
  displayName String

  type    ParameterType
  options String[]
  unit    String?

  groupActivity   GroupActivity @relation(fields: [groupActivityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityId String        @db.Uuid

  @@unique([groupActivityId, name])
}

model GroupActivityClue {
  id Int @id @default(autoincrement())

  name        String
  displayName String

  type  ParameterType
  value String
  unit  String?

  groupActivity   GroupActivity @relation(fields: [groupActivityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityId String        @db.Uuid

  @@unique([groupActivityId, name])
}

model GroupActivityClueInstance {
  id Int @id @default(autoincrement())

  name        String
  displayName String

  type  ParameterType
  value String
  unit  String?

  assignments             GroupActivityClueAssignment[]
  groupActivityInstance   GroupActivityInstance         @relation(fields: [groupActivityInstanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityInstanceId Int

  @@unique([groupActivityInstanceId, name])
}

enum GroupActivityStatus {
  DRAFT
  PUBLISHED
  GRADED
}

model GroupActivity {
  id String @id @default(uuid()) @db.Uuid

  name        String
  displayName String
  status      GroupActivityStatus @default(DRAFT)

  pointsMultiplier Int @default(1)

  description      String?
  scheduledStartAt DateTime
  scheduledEndAt   DateTime

  stacks ElementStack[]

  parameters        GroupActivityParameter[]
  clues             GroupActivityClue[]
  activityInstances GroupActivityInstance[]

  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId  String @db.Uuid
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupActivityClueAssignment {
  id Int @id @default(autoincrement())

  groupActivityClueInstance   GroupActivityClueInstance @relation(fields: [groupActivityClueInstanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityClueInstanceId Int
  groupActivityInstance       GroupActivityInstance     @relation(fields: [groupActivityInstanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityInstanceId     Int
  participant                 Participant               @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId               String                    @db.Uuid
}

model GroupActivityInstance {
  id Int @id @default(autoincrement())

  clues                  GroupActivityClueInstance[]
  clueInstanceAssignment GroupActivityClueAssignment[]

  /// [PrismaGroupActivityDecisions]
  decisions            Json?
  decisionsSubmittedAt DateTime?
  /// [PrismaGroupActivityResults]
  results              Json?
  resultsComputedAt    DateTime?

  groupActivity   GroupActivity @relation(fields: [groupActivityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupActivityId String        @db.Uuid

  group   ParticipantGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId String           @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([groupActivityId, groupId])
}

// #endregion

// ----- LIVE Q&A -----
// #region
model Feedback {
  id Int @id @default(autoincrement())

  isPublished Boolean @default(false)
  isPinned    Boolean @default(false)
  isResolved  Boolean @default(false)

  content String
  votes   Int    @default(0)

  responses FeedbackResponse[]

  resolvedAt DateTime?

  // TODO: remove after migration
  session   LiveSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String?      @db.Uuid

  liveQuiz   LiveQuiz? @relation(fields: [liveQuizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  liveQuizId String?   @db.Uuid

  participant   Participant? @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId String?      @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackResponse {
  id Int @id @default(autoincrement())

  content           String
  positiveReactions Int    @default(0)
  negativeReactions Int    @default(0)

  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedbackId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfusionTimestep {
  id Int @id @default(autoincrement())

  difficulty Int
  speed      Int

  // TODO: remove after migration
  session   LiveSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionId String?      @db.Uuid

  liveQuiz   LiveQuiz? @relation(fields: [liveQuizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  liveQuizId String?   @db.Uuid

  createdAt DateTime @default(now())
}

// #endregion
