schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Achievement {
  descriptionDE: String
  descriptionEN: String
  icon: String!
  iconColor: String
  id: Int!
  nameDE: String
  nameEN: String
}

type ActivityEvaluation {
  description: String
  displayName: String
  id: ID!
  name: String!
  results: [StackEvaluation!]!
}

type ActivitySummary {
  numOfAnonymousResponses: Int!
  numOfResponses: Int!
}

input AvatarSettingsInput {
  accessory: String!
  clothing: String!
  clothingColor: String!
  eyes: String!
  facialHair: String!
  hair: String!
  hairColor: String!
  mouth: String!
  skinTone: String!
}

type AwardEntry {
  description: String!
  displayName: String!
  id: Int!
  name: String!
  order: Int!
  participant: Participant
  participantGroup: ParticipantGroup
  type: String!
}

input BlockInput {
  questionIds: [Int!]!
  randomSelection: Int
  timeLimit: Int
}

type Choice {
  correct: Boolean
  feedback: String
  ix: Int!
  value: String!
}

type ChoiceElementResults {
  correct: Boolean
  count: Int!
  feedback: String
  value: String!
}

input ChoiceInput {
  correct: Boolean
  feedback: String
  ix: Int!
  value: String!
}

type ChoiceQuestionOptions {
  choices: [Choice!]!
  displayMode: ElementDisplayMode!
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
}

type ChoicesElementData {
  content: String!
  elementId: Int!
  explanation: String
  id: ID!
  name: String!
  options: ChoiceQuestionOptions!
  pointsMultiplier: Int!
  type: ElementType!
}

type ChoicesElementInstanceEvaluation {
  content: String!
  explanation: String
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  name: String!
  results: ChoicesElementResults!
  type: ElementType!
}

type ChoicesElementResults {
  anonymousAnswers: Int!
  choices: [ChoiceElementResults!]!
  totalAnswers: Int!
}

type ChoicesInstanceEvaluation {
  choices: Json
  correctness: Float
  elementType: ElementType!
  explanation: String
  feedbacks: [QuestionFeedback!]
  instanceId: Int!
  lastResponse: SingleQuestionResponseChoices
  newPointsFrom: Date
  newXpFrom: Date
  numAnswers: Int
  percentile: Float
  pointsAwarded: Float
  pointsMultiplier: Int!
  score: Float!
  xp: Int
  xpAwarded: Int
}

type ChoicesQuestionData {
  content: String!
  explanation: String
  id: ID!
  name: String!
  options: ChoiceQuestionOptions!
  pointsMultiplier: Int
  questionId: Int
  type: ElementType!
}

type ChoicesQuestionResponse {
  aggregatedResponses: Json
  correctCount: Int!
  correctCountStreak: Int!
  eFactor: Float!
  elementType: ElementType!
  id: Int!
  interval: Int!
  lastAnsweredAt: Date
  lastAwardedAt: Date
  lastCorrectAt: Date
  lastPartialCorrectAt: Date
  lastResponse: SingleQuestionResponseChoices!
  lastWrongAt: Date
  lastXpAwardedAt: Date
  nextDueAt: Date
  partialCorrectCount: Int!
  totalPointsAwarded: Float
  totalScore: Float!
  totalXpAwarded: Float
  trialsCount: Int!
  wrongCount: Int!
}

type ClassAchievementInstance {
  id: Int!
}

type ConfusionSummary {
  difficulty: Float!
  numberOfParticipants: Int
  speed: Float!
}

type ConfusionTimestep {
  createdAt: Date!
  difficulty: Int!
  speed: Int!
}

type ContentElementData {
  content: String!
  elementId: Int!
  explanation: String
  id: ID!
  name: String!
  pointsMultiplier: Int!
  type: ElementType!
}

type ContentElementInstanceEvaluation {
  content: String!
  explanation: String
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  name: String!
  results: ContentElementResults!
  type: ElementType!
}

type ContentElementQData {
  content: String!
  explanation: String
  id: ID!
  name: String!
  pointsMultiplier: Int
  questionId: Int
  type: ElementType!
}

type ContentElementResults {
  anonymousAnswers: Int!
  totalAnswers: Int!
}

type ContentInstanceEvaluation {
  correctness: Float
  elementType: ElementType!
  explanation: String
  feedbacks: [QuestionFeedback!]
  instanceId: Int!
  lastResponse: SingleQuestionResponseContent
  newPointsFrom: Date
  newXpFrom: Date
  numAnswers: Int
  percentile: Float
  pointsAwarded: Float
  pointsMultiplier: Int!
  score: Float!
  xp: Int
  xpAwarded: Int
}

type ContentQuestionResponse {
  aggregatedResponses: Json
  correctCount: Int!
  correctCountStreak: Int!
  eFactor: Float!
  elementType: ElementType!
  id: Int!
  interval: Int!
  lastAnsweredAt: Date
  lastAwardedAt: Date
  lastCorrectAt: Date
  lastPartialCorrectAt: Date
  lastResponse: SingleQuestionResponseContent!
  lastWrongAt: Date
  lastXpAwardedAt: Date
  nextDueAt: Date
  partialCorrectCount: Int!
  totalPointsAwarded: Float
  totalScore: Float!
  totalXpAwarded: Float
  trialsCount: Int!
  wrongCount: Int!
}

type Course {
  averageActiveScore: Float
  averageScore: Float
  awards: [AwardEntry!]
  color: String!
  createdAt: Date
  description: String
  displayName: String!
  endDate: Date!
  groupActivities: [GroupActivity!]
  groupAssignmentPoolEntries: [GroupAssignmentPoolEntry!]
  groupDeadlineDate: Date
  id: ID!
  isArchived: Boolean!
  isGamificationEnabled: Boolean!
  isGroupCreationEnabled: Boolean!
  isGroupDeadlinePassed: Boolean
  leaderboard: [LeaderboardEntry!]
  maxGroupSize: Int!
  microLearnings: [MicroLearning!]
  name: String!
  notificationEmail: String
  numOfActiveParticipants: Int
  numOfParticipantGroups: Int
  numOfParticipants: Int
  owner: User
  participantGroups: [ParticipantGroup!]
  pinCode: Int
  practiceQuizzes: [PracticeQuiz!]
  preferredGroupSize: Int!
  randomAssignmentFinalized: Boolean!
  sessions: [Session!]
  startDate: Date!
  updatedAt: Date
}

type CourseSummary {
  numOfGroupActivities: Int!
  numOfLeaderboardEntries: Int!
  numOfLiveQuizzes: Int!
  numOfMicroLearnings: Int!
  numOfParticipantGroups: Int!
  numOfParticipations: Int!
  numOfPracticeQuizzes: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Element {
  content: String!
  createdAt: Date!
  explanation: String
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  options: Json!
  pointsMultiplier: Int!
  questionData: QuestionData
  status: ElementStatus!
  tags: [Tag!]
  type: ElementType!
  updatedAt: Date!
  version: Int!
}

union ElementData = ChoicesElementData | ContentElementData | FlashcardElementData | FreeTextElementData | NumericalElementData

enum ElementDisplayMode {
  GRID
  LIST
}

type ElementFeedback {
  downvote: Boolean!
  elementInstanceId: Int!
  feedback: String
  id: Int!
  upvote: Boolean!
}

type ElementInstance {
  elementData: ElementData!
  elementType: ElementType!
  feedbacks: [ElementFeedback!]
  id: Int!
  options: ElementInstanceOptions
  type: ElementInstanceType!
}

union ElementInstanceEvaluation = ChoicesElementInstanceEvaluation | ContentElementInstanceEvaluation | FlashcardElementInstanceEvaluation | FreeElementInstanceEvaluation | NumericalElementInstanceEvaluation

type ElementInstanceOptions {
  pointsMultiplier: Int
  resetTimeDays: Int
}

enum ElementInstanceType {
  GROUP_ACTIVITY
  LIVE_QUIZ
  MICROLEARNING
  PRACTICE_QUIZ
}

enum ElementOrderType {
  SEQUENTIAL
  SPACED_REPETITION
}

type ElementStack {
  description: String
  displayName: String
  elements: [ElementInstance!]
  id: Int!
  order: Int
  type: ElementStackType!
}

input ElementStackInput {
  description: String
  displayName: String
  elements: [StackElementsInput!]!
  order: Int!
}

enum ElementStackType {
  GROUP_ACTIVITY
  LIVE_QUIZ
  MICROLEARNING
  PRACTICE_QUIZ
}

enum ElementStatus {
  DRAFT
  READY
  REVIEW
}

enum ElementType {
  CONTENT
  FLASHCARD
  FREE_TEXT
  KPRIM
  MC
  NUMERICAL
  SC
}

type EvaluationBlock {
  blockIx: Int!
  blockStatus: SessionBlockStatus!
  tabData: [TabData!]!
}

type Feedback {
  content: String!
  createdAt: Date!
  id: Int!
  isPinned: Boolean!
  isPublished: Boolean!
  isResolved: Boolean!
  resolvedAt: Date
  responses: [FeedbackResponse!]
  votes: Int!
}

type FeedbackResponse {
  content: String!
  createdAt: Date!
  id: Int!
  negativeReactions: Int!
  positiveReactions: Int!
}

type FileUploadSAS {
  containerName: String!
  fileName: String!
  uploadHref: String!
  uploadSasURL: String!
}

enum FlashcardCorrectness {
  CORRECT
  INCORRECT
  PARTIAL
}

enum FlashcardCorrectnessType {
  CORRECT
  INCORRECT
  PARTIAL
}

type FlashcardElementData {
  content: String!
  elementId: Int!
  explanation: String
  id: ID!
  name: String!
  pointsMultiplier: Int!
  type: ElementType!
}

type FlashcardElementInstanceEvaluation {
  content: String!
  explanation: String
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  name: String!
  results: FlashcardElementResults!
  type: ElementType!
}

type FlashcardElementQData {
  content: String!
  explanation: String
  id: ID!
  name: String!
  pointsMultiplier: Int
  questionId: Int
  type: ElementType!
}

type FlashcardElementResults {
  anonymousAnswers: Int!
  correctCount: Int!
  incorrectCount: Int!
  partialCount: Int!
  totalAnswers: Int!
}

type FlashcardInstanceEvaluation {
  correctness: Float
  elementType: ElementType!
  explanation: String
  feedbacks: [QuestionFeedback!]
  instanceId: Int!
  lastResponse: SingleQuestionResponseFlashcard
  newPointsFrom: Date
  newXpFrom: Date
  numAnswers: Int
  percentile: Float
  pointsAwarded: Float
  pointsMultiplier: Int!
  score: Float!
  xp: Int
  xpAwarded: Int
}

type FlashcardQuestionResponse {
  aggregatedResponses: Json
  correctCount: Int!
  correctCountStreak: Int!
  eFactor: Float!
  elementType: ElementType!
  id: Int!
  interval: Int!
  lastAnsweredAt: Date
  lastAwardedAt: Date
  lastCorrectAt: Date
  lastPartialCorrectAt: Date
  lastResponse: SingleQuestionResponseFlashcard!
  lastWrongAt: Date
  lastXpAwardedAt: Date
  nextDueAt: Date
  partialCorrectCount: Int!
  totalPointsAwarded: Float
  totalScore: Float!
  totalXpAwarded: Float
  trialsCount: Int!
  wrongCount: Int!
}

type FreeElementInstanceEvaluation {
  content: String!
  explanation: String
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  name: String!
  results: FreeElementResults!
  type: ElementType!
}

type FreeElementResult {
  correct: Boolean
  count: Int!
  value: String!
}

type FreeElementResults {
  anonymousAnswers: Int!
  maxLength: Int
  responses: [FreeElementResult!]!
  solutions: [String!]
  totalAnswers: Int!
}

type FreeTextElementData {
  content: String!
  elementId: Int!
  explanation: String
  id: ID!
  name: String!
  options: FreeTextQuestionOptions!
  pointsMultiplier: Int!
  type: ElementType!
}

type FreeTextInstanceEvaluation {
  answers: Json
  correctness: Float
  elementType: ElementType!
  explanation: String
  feedbacks: [QuestionFeedback!]
  instanceId: Int!
  lastResponse: SingleQuestionResponseValue
  newPointsFrom: Date
  newXpFrom: Date
  numAnswers: Int
  percentile: Float
  pointsAwarded: Float
  pointsMultiplier: Int!
  score: Float!
  solutions: [String!]
  xp: Int
  xpAwarded: Int
}

type FreeTextQuestionData {
  content: String!
  explanation: String
  id: ID!
  name: String!
  options: FreeTextQuestionOptions!
  pointsMultiplier: Int
  questionId: Int
  type: ElementType!
}

type FreeTextQuestionOptions {
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
  restrictions: FreeTextRestrictions
  solutions: [String!]
}

type FreeTextRestrictions {
  maxLength: Int
}

input FreeTextRestrictionsInput {
  maxLength: Int
  minLength: Int
  pattern: String
}

type GroupAchievementInstance {
  id: Int!
}

type GroupActivity {
  activityInstances: [GroupActivityInstance!]
  clues: [GroupActivityClue!]
  course: Course
  description: String
  displayName: String!
  id: ID!
  name: String!
  numOfQuestions: Int
  pointsMultiplier: Int
  scheduledEndAt: Date!
  scheduledStartAt: Date!
  stacks: [ElementStack!]
  status: GroupActivityStatus!
}

type GroupActivityClue {
  displayName: String!
  id: Int!
  name: String!
  type: ParameterType!
  unit: String
  value: String!
}

type GroupActivityClueAssignment {
  id: Int!
}

input GroupActivityClueInput {
  displayName: String!
  name: String!
  type: ParameterType!
  unit: String
  value: String!
}

type GroupActivityClueInstance {
  displayName: String!
  id: Int!
  name: String!
  participant: Participant!
  type: ParameterType!
  unit: String
  value: String
}

type GroupActivityDecision {
  choicesResponse: [Int!]
  contentResponse: Boolean
  freeTextResponse: String
  instanceId: Int!
  numericalResponse: Float
  type: ElementType!
}

input GroupActivityDecisionInput {
  id: Int!
  response: String
  selectedOptions: [Int!]
}

type GroupActivityDetails {
  activityInstance: GroupActivityInstance
  clues: [GroupActivityClue!]!
  course: Course!
  description: String
  displayName: String!
  group: ParticipantGroup!
  id: String!
  name: String!
  scheduledEndAt: Date
  scheduledStartAt: Date
  stacks: [ElementStack!]!
  status: GroupActivityStatus!
}

type GroupActivityGrading {
  feedback: String
  instanceId: Int!
  maxPoints: Float!
  score: Float!
}

input GroupActivityGradingDecisionInput {
  feedback: String
  instanceId: Int!
  score: Float!
}

input GroupActivityGradingInput {
  comment: String
  grading: [GroupActivityGradingDecisionInput!]!
  passed: Boolean!
}

type GroupActivityInstance {
  clues: [GroupActivityClueInstance!]
  decisions: Json
  decisionsSubmittedAt: Date
  groupActivityId: ID!
  groupName: String
  id: Int!
  results: Json
  resultsComputedAt: Date
}

type GroupActivityParameter {
  id: Int!
}

type GroupActivityResults {
  comment: String
  grading: [GroupActivityGrading!]!
  passed: Boolean!
  points: Float!
}

enum GroupActivityStatus {
  DRAFT
  ENDED
  GRADED
  PUBLISHED
  SCHEDULED
}

type GroupActivitySummary {
  numOfStartedInstances: Int!
  numOfSubmissions: Int!
}

type GroupAssignmentPoolEntry {
  courseId: ID!
  id: ID!
  participant: Participant
  participantId: ID!
}

type GroupLeaderboardEntry {
  id: ID!
  isMember: Boolean
  name: String!
  rank: Int!
  score: Float!
}

type GroupMessage {
  content: String!
  createdAt: Date!
  group: ParticipantGroup
  id: Int!
  participant: Participant!
  updatedAt: Date!
}

union InstanceEvaluation = ChoicesInstanceEvaluation | ContentInstanceEvaluation | FlashcardInstanceEvaluation | FreeTextInstanceEvaluation | NumericalInstanceEvaluation

type InstanceResult {
  blockIx: Int
  id: String!
  instanceIx: Int!
  participants: Int!
  questionData: QuestionData!
  results: Json!
  statistics: Statistics
  status: SessionBlockStatus!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LeaderboardEntry {
  avatar: String
  email: String
  id: Int!
  isSelf: Boolean
  lastBlockOrder: Int
  level: Int!
  participant: Participant
  participantId: String!
  participation: Participation!
  rank: Int!
  score: Float!
  username: String!
}

type LeaderboardStatistics {
  averageScore: Float!
  participantCount: Int!
}

type LeaveCourseParticipation {
  id: String!
  participation: Participation!
}

type Level {
  avatar: String
  id: Int!
  index: Int!
  name: String
  nextLevel: Level
  requiredXp: Int!
}

enum LocaleType {
  de
  en
}

type MediaFile {
  createdAt: Date!
  href: String!
  id: ID!
  name: String!
  type: String!
}

type MicroLearning {
  arePushNotificationsSent: Boolean
  course: Course
  description: String
  displayName: String!
  id: ID!
  name: String!
  numOfStacks: Int
  pointsMultiplier: Float!
  scheduledEndAt: Date!
  scheduledStartAt: Date!
  stacks: [ElementStack!]
  status: PublicationStatus!
}

type Mutation {
  activateParticipantAccount(token: String!): ID
  activateSessionBlock(sessionBlockId: Int!, sessionId: String!): Session
  addConfusionTimestep(difficulty: Int!, sessionId: String!, speed: Int!): ConfusionTimestep
  addMessageToGroup(content: String!, groupId: String!): GroupMessage
  bookmarkElementStack(bookmarked: Boolean!, courseId: String!, stackId: Int!): [Int!]
  cancelSession(id: String!): Session
  changeEmailSettings(projectUpdates: Boolean!): User
  changeInitialSettings(locale: LocaleType!, sendUpdates: Boolean!, shortname: String!): User
  changeLiveQuizName(displayName: String!, id: String!, name: String!): Session
  changeParticipantLocale(locale: LocaleType!): Participant
  changeSessionSettings(id: String!, isConfusionFeedbackEnabled: Boolean, isGamificationEnabled: Boolean, isLiveQAEnabled: Boolean, isModerationEnabled: Boolean): Session
  changeShortname(shortname: String!): User
  changeUserLocale(locale: LocaleType!): User
  createCourse(color: String, description: String, displayName: String!, endDate: Date!, groupDeadlineDate: Date!, isGamificationEnabled: Boolean!, isGroupCreationEnabled: Boolean!, maxGroupSize: Int!, name: String!, notificationEmail: String, preferredGroupSize: Int!, startDate: Date!): Course
  createFeedback(content: String!, sessionId: String!): Feedback
  createGroupActivity(clues: [GroupActivityClueInput!]!, courseId: String!, description: String, displayName: String!, endDate: Date!, multiplier: Int!, name: String!, stack: ElementStackInput!, startDate: Date!): GroupActivity
  createMicroLearning(courseId: String!, description: String, displayName: String!, endDate: Date!, multiplier: Int!, name: String!, stacks: [ElementStackInput!]!, startDate: Date!): MicroLearning
  createParticipantAccount(courseId: String, email: String!, isProfilePublic: Boolean!, password: String!, signedLtiData: String, username: String!): ParticipantTokenData
  createParticipantGroup(courseId: String!, name: String!): ParticipantGroup
  createPracticeQuiz(availableFrom: Date, courseId: String!, description: String, displayName: String!, multiplier: Int!, name: String!, order: ElementOrderType!, resetTimeDays: Int!, stacks: [ElementStackInput!]!): PracticeQuiz
  createSession(blocks: [BlockInput!]!, courseId: String, description: String, displayName: String!, isConfusionFeedbackEnabled: Boolean!, isGamificationEnabled: Boolean!, isLiveQAEnabled: Boolean!, isModerationEnabled: Boolean!, maxBonusPoints: Int!, multiplier: Int!, name: String!, timeToZeroBonus: Int!): Session
  createUserLogin(name: String!, password: String!, scope: UserLoginScope!): UserLogin
  deactivateSessionBlock(sessionBlockId: Int!, sessionId: String!): Session
  deleteCourse(id: String!): Course
  deleteFeedback(id: Int!): Feedback
  deleteFeedbackResponse(id: Int!): Feedback
  deleteGroupActivity(id: String!): GroupActivity
  deleteLiveQuiz(id: String!): Session
  deleteMicroLearning(id: String!): MicroLearning
  deleteParticipantAccount: Boolean
  deletePracticeQuiz(id: String!): PracticeQuiz
  deleteQuestion(id: Int!): Element
  deleteTag(id: Int!): Tag
  deleteUserLogin(id: String!): UserLogin
  editGroupActivity(clues: [GroupActivityClueInput!]!, courseId: String!, description: String, displayName: String!, endDate: Date!, id: String!, multiplier: Int!, name: String!, stack: ElementStackInput!, startDate: Date!): GroupActivity
  editMicroLearning(courseId: String!, description: String, displayName: String!, endDate: Date!, id: String!, multiplier: Int!, name: String!, stacks: [ElementStackInput!]!, startDate: Date!): MicroLearning
  editPracticeQuiz(availableFrom: Date, courseId: String!, description: String, displayName: String!, id: String!, multiplier: Int!, name: String!, order: ElementOrderType!, resetTimeDays: Int!, stacks: [ElementStackInput!]!): PracticeQuiz
  editSession(blocks: [BlockInput!]!, courseId: String, description: String, displayName: String!, id: String!, isConfusionFeedbackEnabled: Boolean!, isGamificationEnabled: Boolean!, isLiveQAEnabled: Boolean!, isModerationEnabled: Boolean!, maxBonusPoints: Int!, multiplier: Int!, name: String!, timeToZeroBonus: Int!): Session
  editTag(id: Int!, name: String!): Tag
  enableCourseGamification(courseId: String!): Course
  endGroupActivity(id: String!): GroupActivity
  endMicroLearning(id: String!): MicroLearning
  endSession(id: String!): Session
  extendGroupActivity(endDate: Date!, id: String!): GroupActivity
  extendMicroLearning(endDate: Date!, id: String!): MicroLearning
  finalRandomGroupAssignments: Boolean!
  finalizeGroupActivityGrading(id: String!): GroupActivity
  flagElement(content: String!, elementId: Int!, elementInstanceId: Int!): ElementFeedback
  generateLoginToken: User
  getFileUploadSas(contentType: String!, fileName: String!): FileUploadSAS
  gradeGroupActivitySubmission(gradingDecisions: GroupActivityGradingInput!, id: Int!): GroupActivityInstance
  joinCourse(courseId: String!): ParticipantLearningData
  joinCourseWithPin(pin: Int!): Participant
  joinParticipantGroup(code: Int!, courseId: String!): String
  joinRandomCourseGroupPool(courseId: String!): Boolean!
  leaveCourse(courseId: String!): LeaveCourseParticipation
  leaveParticipantGroup(courseId: String!, groupId: String!): ParticipantGroup
  leaveRandomCourseGroupPool(courseId: String!): Boolean!
  loginParticipant(password: String!, usernameOrEmail: String!): ID
  loginParticipantMagicLink(token: String!): ID
  loginParticipantWithLti(courseId: String, signedLtiData: String!): ParticipantTokenData
  loginUserToken(shortname: String!, token: String!): ID
  logoutParticipant: ID
  logoutUser: ID
  manipulateChoicesQuestion(content: String, explanation: String, id: Int, name: String, options: OptionsChoicesInput, pointsMultiplier: Int, status: ElementStatus, tags: [String!], type: ElementType!): Element
  manipulateContentElement(content: String, id: Int, name: String, pointsMultiplier: Int, status: ElementStatus, tags: [String!]): Element
  manipulateFlashcardElement(content: String, explanation: String, id: Int, name: String, pointsMultiplier: Int, status: ElementStatus, tags: [String!]): Element
  manipulateFreeTextQuestion(content: String, explanation: String, id: Int, name: String, options: OptionsFreeTextInput, pointsMultiplier: Int, status: ElementStatus, tags: [String!]): Element
  manipulateNumericalQuestion(content: String, explanation: String, id: Int, name: String, options: OptionsNumericalInput, pointsMultiplier: Int, status: ElementStatus, tags: [String!]): Element
  manualRandomGroupAssignments(courseId: String!): Course
  markMicroLearningCompleted(courseId: String!, id: String!): Participation
  openGroupActivity(id: String!): GroupActivity
  pinFeedback(id: Int!, isPinned: Boolean!): Feedback
  publishFeedback(id: Int!, isPublished: Boolean!): Feedback
  publishGroupActivity(id: String!): GroupActivity
  publishMicroLearning(id: String!): MicroLearning
  publishPracticeQuiz(id: String!): PracticeQuiz
  publishScheduledActivities: Boolean!
  rateElement(elementId: Int!, elementInstanceId: Int!, rating: Int!): ElementFeedback
  renameParticipantGroup(groupId: String!, name: String!): ParticipantGroup
  requestMigrationToken(email: String!): Boolean
  resolveFeedback(id: Int!, isResolved: Boolean!): Feedback
  respondToElementStack(courseId: String!, responses: [StackResponseInput!]!, stackAnswerTime: Int!, stackId: Int!): StackFeedback
  respondToFeedback(id: Int!, responseContent: String!): Feedback
  runningRandomGroupAssignments: Boolean!
  sendMagicLink(usernameOrEmail: String!): Boolean
  sendPushNotifications: Boolean!
  startGroupActivity(activityId: String!, groupId: String!): GroupActivityDetails
  startSession(id: String!): Session
  submitGroupActivityDecisions(activityId: Int!, responses: [StackResponseInput!]!): Int
  subscribeToPush(courseId: String!, subscriptionObject: SubscriptionObjectInput!): Participation
  toggleArchiveCourse(id: String!, isArchived: Boolean!): Course
  toggleIsArchived(isArchived: Boolean!, questionIds: [Int!]!): [Element!]
  triggerMigration(token: String!): Boolean
  unpublishGroupActivity(id: String!): GroupActivity
  unpublishMicroLearning(id: String!): MicroLearning
  unpublishPracticeQuiz(id: String!): PracticeQuiz
  unsubscribeFromPush(courseId: String!, endpoint: String!): Boolean
  updateCourseSettings(color: String, description: String, displayName: String, endDate: Date, groupDeadlineDate: Date, id: String!, isGamificationEnabled: Boolean, isGroupCreationEnabled: Boolean, name: String, notificationEmail: String, startDate: Date): Course
  updateGroupAverageScores: Boolean!
  updateParticipantAvatar(avatar: String!, avatarSettings: AvatarSettingsInput!): Participant
  updateParticipantProfile(email: String!, isProfilePublic: Boolean, password: String, username: String!): Participant
  updateQuestionInstances(questionId: Int!): [QuestionOrElementInstance!]!
  updateTagOrdering(originIx: Int!, targetIx: Int!): [Tag!]
  upvoteFeedback(feedbackId: Int!, increment: Int!): Feedback
  voteFeedbackResponse(id: Int!, incrementDownvote: Int!, incrementUpvote: Int!): FeedbackResponse
}

type NumericalElementData {
  content: String!
  elementId: Int!
  explanation: String
  id: ID!
  name: String!
  options: NumericalQuestionOptions!
  pointsMultiplier: Int!
  type: ElementType!
}

type NumericalElementInstanceEvaluation {
  content: String!
  explanation: String
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  name: String!
  results: NumericalElementResults!
  type: ElementType!
}

type NumericalElementResult {
  correct: Boolean
  count: Int!
  value: Float!
}

type NumericalElementResults {
  anonymousAnswers: Int!
  maxValue: Float
  minValue: Float
  responseValues: [NumericalElementResult!]!
  solutionRanges: [NumericalElementSolutions!]!
  totalAnswers: Int!
}

type NumericalElementSolutions {
  max: Float
  min: Float
}

type NumericalInstanceEvaluation {
  answers: Json
  correctness: Float
  elementType: ElementType!
  explanation: String
  feedbacks: [QuestionFeedback!]
  instanceId: Int!
  lastResponse: SingleQuestionResponseValue
  newPointsFrom: Date
  newXpFrom: Date
  numAnswers: Int
  percentile: Float
  pointsAwarded: Float
  pointsMultiplier: Int!
  score: Float!
  solutionRanges: [NumericalSolutionRange!]
  xp: Int
  xpAwarded: Int
}

type NumericalQuestionData {
  content: String!
  explanation: String
  id: ID!
  name: String!
  options: NumericalQuestionOptions!
  pointsMultiplier: Int
  questionId: Int
  type: ElementType!
}

type NumericalQuestionOptions {
  accuracy: Int
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
  placeholder: String
  restrictions: NumericalRestrictions
  solutionRanges: [NumericalSolutionRange!]
  unit: String
}

type NumericalRestrictions {
  max: Float
  min: Float
}

input NumericalRestrictionsInput {
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
  max: Float
  min: Float
}

type NumericalSolutionRange {
  max: Float
  min: Float
}

type OpenQuestionResponse {
  aggregatedResponses: Json
  correctCount: Int!
  correctCountStreak: Int!
  eFactor: Float!
  elementType: ElementType!
  id: Int!
  interval: Int!
  lastAnsweredAt: Date
  lastAwardedAt: Date
  lastCorrectAt: Date
  lastPartialCorrectAt: Date
  lastResponse: SingleQuestionResponseValue!
  lastWrongAt: Date
  lastXpAwardedAt: Date
  nextDueAt: Date
  partialCorrectCount: Int!
  totalPointsAwarded: Float
  totalScore: Float!
  totalXpAwarded: Float
  trialsCount: Int!
  wrongCount: Int!
}

input OptionsChoicesInput {
  choices: [ChoiceInput!]
  displayMode: ElementDisplayMode
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
}

input OptionsFreeTextInput {
  feedback: String
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
  placeholder: String
  restrictions: FreeTextRestrictionsInput
  solutions: [String!]
}

input OptionsNumericalInput {
  accuracy: Int
  feedback: String
  hasAnswerFeedbacks: Boolean
  hasSampleSolution: Boolean
  restrictions: NumericalRestrictionsInput
  solutionRanges: [SolutionRangeInput!]
  unit: String
}

enum ParameterType {
  NUMBER
  STRING
}

type Participant {
  achievements: [ParticipantAchievementInstance!]
  avatar: String
  avatarSettings: Json
  email: String
  id: ID!
  isActive: Boolean!
  isProfilePublic: Boolean
  isSelf: Boolean
  lastLoginAt: Date
  level: Int
  levelData: Level
  locale: LocaleType!
  participantGroups: [ParticipantGroup!]
  rank: Int
  score: Float
  username: String!
  xp: Int!
}

type ParticipantAchievementInstance {
  achievedAt: Date!
  achievedCount: Int!
  achievement: Achievement!
  id: Int!
}

type ParticipantGroup {
  averageMemberScore: Int!
  code: Int!
  groupActivityScore: Int!
  id: ID!
  messages: [GroupMessage!]
  name: String!
  participants: [Participant!]
  score: Float
}

type ParticipantLearningData {
  course: Course
  groupActivityInstances: [GroupActivityInstance!]
  groupLeaderboard: [GroupLeaderboardEntry!]
  groupLeaderboardStatistics: LeaderboardStatistics
  id: String!
  inRandomGroupPool: Boolean
  leaderboard: [LeaderboardEntry!]
  leaderboardStatistics: LeaderboardStatistics
  participant: Participant
  participantToken: String
  participation: Participation
}

type ParticipantTokenData {
  participant: Participant
  participantToken: String
}

type ParticipantWithAchievements {
  achievements: [Achievement!]!
  participant: Participant!
}

type Participation {
  completedMicroLearnings: [String!]!
  course: Course
  id: Int!
  isActive: Boolean!
  participant: Participant
  subscriptions: [PushSubscription!]
}

type PracticeQuiz {
  availableFrom: Date
  course: Course
  courseId: String
  description: String
  displayName: String!
  id: String!
  name: String!
  numOfStacks: Int
  orderType: ElementOrderType!
  pointsMultiplier: Int!
  resetTimeDays: Int!
  stacks: [ElementStack!]
  status: PublicationStatus!
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

type PushSubscription {
  endpoint: String!
  id: Int!
}

type Query {
  basicCourseInformation(courseId: String!): StudentCourse
  checkParticipantNameAvailable(username: String!): Boolean!
  checkShortnameAvailable(shortname: String!): Boolean!
  checkValidCoursePin(pin: Int!): String
  cockpitSession(id: String!): Session
  controlCourse(id: String!): Course
  controlCourses: [Course!]
  controlSession(id: String!): Session
  course(id: String!): Course
  coursePracticeQuiz(courseId: String!): PracticeQuiz
  feedbacks(id: String!): [Feedback!]
  getActiveUserCourses: [Course!]
  getBookmarkedElementStacks(courseId: String!): [ElementStack!]
  getBookmarksPracticeQuiz(courseId: String!, quizId: String): [Int!]
  getCourseGroups(courseId: String!): Course
  getCourseOverviewData(courseId: String!): ParticipantLearningData
  getCourseSummary(courseId: String!): CourseSummary
  getGradingGroupActivity(id: String!): GroupActivity
  getGroupActivitySummary(id: String!): GroupActivitySummary
  getLiveQuizSummary(quizId: String!): RunningLiveQuizSummary
  getLoginToken: User
  getMicroLearningEvaluation(id: String!): ActivityEvaluation
  getMicroLearningSummary(id: String!): ActivitySummary
  getParticipation(courseId: String!): Participation
  getPracticeCourses: [Course!]
  getPracticeQuizEvaluation(id: String!): ActivityEvaluation
  getPracticeQuizList: [Course!]
  getPracticeQuizSummary(id: String!): ActivitySummary
  getPreviousStackEvaluation(stackId: Int!): StackFeedback
  getSingleMicroLearning(id: String!): MicroLearning
  getSinglePracticeQuiz(id: String!): PracticeQuiz
  getStackElementFeedbacks(elementInstanceIds: [Int!]!): [ElementFeedback!]
  groupActivities(courseId: String!): [GroupActivity!]
  groupActivity(id: String!): GroupActivity
  groupActivityDetails(activityId: String!, groupId: String!): GroupActivityDetails
  groupActivityInstances(courseId: String!, groupId: String!): [GroupActivityInstance!]
  liveSession(id: String!): Session
  microLearning(id: String!): MicroLearning
  participantCourses: [Course!]
  participantGroups(courseId: String!): [ParticipantGroup!]
  participations(endpoint: String): [Participation!]
  pinnedFeedbacks(id: String!): Session
  practiceQuiz(id: String!): PracticeQuiz
  publicParticipantProfile(participantId: String!): Participant
  question(id: Int!): Element
  runningSessions(shortname: String!): [Session!]
  runningSessionsCourse(courseId: String!): [Session!]
  self: Participant
  selfWithAchievements: ParticipantWithAchievements
  session(id: String!): Session
  sessionEvaluation(hmac: String, id: String!): SessionEvaluation
  sessionHMAC(id: String!): String
  sessionLeaderboard(sessionId: String!): [LeaderboardEntry!]
  unassignedSessions: [Session!]
  userCourses: [Course!]
  userLogins: [UserLogin!]
  userMediaFiles: [MediaFile!]
  userProfile: User
  userQuestions: [Element!]
  userRunningSessions: [Session!]
  userScope: UserLoginScope
  userSessions: [Session!]
  userTags: [Tag!]
}

union QuestionData = ChoicesQuestionData | ContentElementQData | FlashcardElementQData | FreeTextQuestionData | NumericalQuestionData

type QuestionFeedback {
  correct: Boolean
  feedback: String
  ix: Int!
  value: String!
}

type QuestionInstance {
  id: Int!
  pointsMultiplier: Int
  questionData: QuestionData
}

type QuestionOrElementInstance {
  elementInstance: ElementInstance
  questionInstance: QuestionInstance
}

union QuestionResponse = ChoicesQuestionResponse | ContentQuestionResponse | FlashcardQuestionResponse | OpenQuestionResponse

enum ResponseCorrectness {
  CORRECT
  PARTIAL
  WRONG
}

enum ResponseCorrectnessType {
  CORRECT
  INCORRECT
  PARTIAL
}

input ResponseInput {
  choices: [Int!]
  value: String
}

type RunningLiveQuizSummary {
  numOfConfusionFeedbacks: Int!
  numOfFeedbacks: Int!
  numOfLeaderboardEntries: Int!
  numOfResponses: Int!
}

type Session {
  accessMode: SessionAccessMode!
  activeBlock: SessionBlock
  blocks: [SessionBlock!]
  confusionFeedbacks: [ConfusionTimestep!]
  confusionSummary: ConfusionSummary
  course: Course
  createdAt: Date!
  description: String
  displayName: String!
  feedbacks: [Feedback!]
  finishedAt: Date
  id: ID!
  isConfusionFeedbackEnabled: Boolean!
  isGamificationEnabled: Boolean!
  isLiveQAEnabled: Boolean!
  isModerationEnabled: Boolean!
  linkTo: String
  linkToJoin: String
  maxBonusPoints: Int!
  name: String!
  namespace: String!
  numOfBlocks: Int
  numOfQuestions: Int
  pinCode: Int
  pointsMultiplier: Int!
  startedAt: Date
  status: SessionStatus!
  timeToZeroBonus: Int!
  updatedAt: Date
}

enum SessionAccessMode {
  PUBLIC
  RESTRICTED
}

type SessionBlock {
  execution: Int
  expiresAt: Date
  id: Int!
  instances: [QuestionInstance!]
  numOfParticipants: Int
  order: Int!
  randomSelection: Int
  status: SessionBlockStatus!
  timeLimit: Int
}

enum SessionBlockStatus {
  ACTIVE
  EXECUTED
  SCHEDULED
}

type SessionEvaluation {
  blocks: [EvaluationBlock!]!
  confusionFeedbacks: [ConfusionTimestep!]!
  displayName: String!
  feedbacks: [Feedback!]!
  id: String!
  instanceResults: [InstanceResult!]!
  isGamificationEnabled: Boolean!
  status: SessionStatus!
}

enum SessionStatus {
  COMPLETED
  PREPARED
  RUNNING
  SCHEDULED
}

type SingleQuestionResponseChoices {
  choices: [Int!]!
}

type SingleQuestionResponseContent {
  viewed: Boolean!
}

type SingleQuestionResponseFlashcard {
  correctness: FlashcardCorrectness!
}

type SingleQuestionResponseValue {
  value: String!
}

input SolutionRangeInput {
  max: Float
  min: Float
}

input StackElementsInput {
  elementId: Int!
  order: Int!
}

type StackEvaluation {
  instances: [ElementInstanceEvaluation!]!
  stackDescription: String
  stackId: Int!
  stackName: String
  stackOrder: Int!
}

type StackFeedback {
  evaluations: [InstanceEvaluation!]
  id: Int!
  score: Int
  status: StackFeedbackStatus!
}

enum StackFeedbackStatus {
  correct
  incorrect
  manuallyGraded
  partial
  unanswered
}

input StackResponseInput {
  choicesResponse: [Int!]
  contentReponse: Boolean
  flashcardResponse: FlashcardCorrectnessType
  freeTextResponse: String
  instanceId: Int!
  numericalResponse: Float
  type: ElementType!
}

type Statistics {
  max: Float!
  mean: Float!
  median: Float!
  min: Float!
  q1: Float!
  q3: Float!
  sd: Float!
}

type StudentCourse {
  color: String!
  description: String
  displayName: String!
  id: ID!
  owner: User!
  pinCode: Int
}

type Subscription {
  feedbackAdded(sessionId: String!): Feedback!
  feedbackCreated(sessionId: String!): Feedback!
  feedbackRemoved(sessionId: String!): String!
  feedbackUpdated(sessionId: String!): Feedback!
  groupActivityEnded(courseId: String!): GroupActivity!
  groupActivityStarted(courseId: String!): GroupActivity!
  microLearningEnded(activityId: String!): MicroLearning!
  runningSessionUpdated(sessionId: String!): SessionBlock
  singleGroupActivityEnded(activityId: String!): GroupActivity!
}

input SubscriptionKeysInput {
  auth: String!
  p256dh: String!
}

input SubscriptionObjectInput {
  endpoint: String!
  expirationTime: Int
  keys: SubscriptionKeysInput!
}

type TabData {
  id: String!
  name: String!
  questionIx: Int
  status: String
}

type Tag {
  id: Int!
  name: String!
  order: Int!
}

type Title {
  id: Int!
}

type User {
  catalyst: Boolean!
  catalystTier: String
  email: String!
  firstLogin: Boolean!
  id: ID!
  locale: LocaleType!
  loginToken: String
  loginTokenExpiresAt: Date
  mediaFiles: [MediaFile!]
  sendProjectUpdates: Boolean!
  shortname: String!
}

type UserLogin {
  id: ID!
  lastLoginAt: Date
  name: String!
  scope: UserLoginScope!
  user: User
}

enum UserLoginScope {
  ACCOUNT_OWNER
  ACTIVATION
  FULL_ACCESS
  OTP
  READ_ONLY
  SESSION_EXEC
}