### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BlockInput {
  questionIds: [Int!]
  randomSelection: Int
  timeLimit: Int
}

type Choice {
  correct: Boolean
  feedback: String
  value: String!
}

type ChoicesQuestionData implements QuestionData {
  content: String!
  contentPlain: String!
  id: Int
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  options: ChoicesQuestionOptions!
  type: String!
}

type ChoicesQuestionOptions {
  choices: [Choice]
}

type Course {
  displayName: String
  id: ID
  learningElements: [LearningElement]
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type InstanceEvaluation {
  choices: JSONObject
  feedbacks: [QuestionFeedback]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LearningElement {
  course: Course
  id: ID
  instances: [QuestionInstance]
}

type Mutation {
  activateSessionBlock(sessionBlockId: Int!, sessionId: ID!): Session
  createSession(blocks: [BlockInput!]!, displayName: String, name: String!): Session
  joinCourse(courseId: ID!): Participation
  leaveCourse(courseId: ID!): Participation
  loginParticipant(password: String!, username: String!): ID
  loginUser(email: String!, password: String!): ID
  registerParticipantFromLTI(courseId: ID!, participantEmail: String!, participantId: ID!): ParticipantLearningData
  respondToQuestionInstance(courseId: ID!, id: Int!, response: ResponseInput!): QuestionInstance
  startSession(id: ID!): Session
}

type Participant {
  avatar: String
  id: ID
  username: String
}

type ParticipantLearningData {
  course: Course
  id: ID
  participant: Participant
  participantToken: String
  participation: Participation
}

type Participation {
  id: Int
  isActive: Boolean
  points: Int
}

type Query {
  getCourseOverviewData(courseId: ID!): ParticipantLearningData
  getParticipantCourses: [Course]
  getSession(id: ID!): Session
  learningElement(id: ID!): LearningElement
  self: Participant
}

interface QuestionData {
  content: String!
  contentPlain: String!
  id: Int
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  type: String!
}

type QuestionFeedback {
  correct: Boolean
  feedback: String
  ix: Int
  value: String
}

type QuestionInstance {
  evaluation: InstanceEvaluation
  id: Int
  questionData: QuestionData
}

input ResponseInput {
  choices: [Int]
  value: String
}

type Session {
  activeBlock: Int!
  blocks: [SessionBlock]
  displayName: String!
  execution: Int!
  id: ID
  isAudienceInteractionActive: Boolean!
  isFeedbackChannelPublic: Boolean!
  name: String!
  namespace: String!
  status: SessionStatus!
}

type SessionBlock {
  id: Int
  instances: [QuestionInstance]
  status: SessionBlockStatus!
}

enum SessionBlockStatus {
  ACTIVE
  EXECUTED
  SCHEDULED
}

enum SessionStatus {
  COMPLETED
  PREPARED
  RUNNING
  SCHEDULED
}