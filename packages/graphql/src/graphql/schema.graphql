type Achievement {
  description: String!
  icon: String!
  iconColor: String
  id: Int!
  name: String!
}

type Attachment {
  id: ID!
}

type AttachmentInstance {
  id: ID!
}

input AvatarSettingsInput {
  accessory: String!
  clothing: String!
  clothingColor: String!
  eyes: String!
  facialHair: String!
  hair: String!
  hairColor: String!
  mouth: String!
  skinTone: String!
}

type AwardEntry {
  id: Int!
}

type ClassAchievementInstance {
  id: Int!
}

type ConfusionTimestep {
  id: Int!
}

type Course {
  color: String
  description: String
  displayName: String!
  id: ID!
  name: String!
  sessions: [Session!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Feedback {
  content: String!
  createdAt: Date!
  id: Int!
  isPinned: Boolean!
  isPublished: Boolean!
  isResolved: Boolean!
  resolvedAt: Date!
  responses: [FeedbackResponse!]!
  votes: Int!
}

type FeedbackResponse {
  content: String!
  id: Int!
  negativeReactions: Int!
  positiveReactions: Int!
}

type GroupAchievementInstance {
  id: Int!
}

type GroupActivity {
  id: ID!
}

type GroupActivityClue {
  id: Int!
}

type GroupActivityClueAssignment {
  id: Int!
}

type GroupActivityClueInstance {
  id: Int!
}

type GroupActivityInstance {
  id: Int!
}

type GroupActivityParameter {
  id: Int!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type LeaderboardEntry {
  id: Int!
}

type LearningElement {
  id: ID!
}

type MicroSession {
  id: ID!
}

type Mutation {
  cancelSession(id: String!): Session
  changeCourseColor(color: String!, courseId: String!): Course
  changeCourseDescription(courseId: String!, input: String!): Course
  createFeedback(content: String!, sessionId: String!): Feedback
  deleteFeedback(id: Int!): Feedback
  deleteFeedbackResponse(id: Int!): Feedback
  deleteQuestion(id: Int!): Question
  deleteTag(id: Int!): Tag
  editTag(id: Int!, name: String!): Tag
  endSession(id: String!): Session
  joinCourseWithPin(courseId: String!, pin: Int!): Participant
  joinParticipantGroup(code: Int!, courseId: String!): ParticipantGroup
  leaveParticipantGroup(courseId: String!, groupId: String!): ParticipantGroup
  loginUser(email: String!, password: String!): String
  pinFeedback(id: Int!, isPinned: Boolean!): Feedback
  publishFeedback(id: Int!, isPublished: Boolean!): Feedback
  resolveFeedback(id: Int!, isResolved: Boolean!): Feedback
  respondToFeedback(id: Int!, responseContent: String!): Feedback
  startSession(id: String!): Session
  subscribeToPush(courseId: String!, subscriptionObject: SubscriptionObjectInput!): Participation
  updateParticipantProfile(avatar: String, avatarSettings: AvatarSettingsInput, password: String, username: String): Participant
  upvoteFeedback(feedbackId: Int!, increment: Int!): Feedback
  voteFeedbackResponse(id: Int!, incrementDownvote: Int!, incrementUpvote: Int!): FeedbackResponse
}

type Participant {
  achievements: [ParticipantAchievementInstance!]!
  avatar: String
  avatarSettings: Json!
  id: ID!
  lastLoginAt: Date!
  level: Int!
  participantGroups: [ParticipantGroup!]!
  username: String!
  xp: Int!
}

type ParticipantAchievementInstance {
  achievedAt: Date!
  achievedCount: Int!
  achievement: Achievement!
  id: Int!
}

type ParticipantGroup {
  code: Int!
  id: ID!
  name: String!
  participants: [Participant!]!
}

type Participation {
  id: Int!
  subscriptions: [PushSubscription!]!
}

type PushSubscription {
  endpoint: String!
  id: Int!
}

type Query {
  basicCourseInformation(courseId: String!): Course
  controlCourse(id: String!): Course
  self: Participant
}

type Question {
  id: Int!
}

type QuestionInstance {
  id: Int!
}

type QuestionResponse {
  id: Int!
}

type QuestionResponseDetail {
  id: Int!
}

type Session {
  accessMode: SessionAccessMode!
  activeBlock: SessionBlock!
  blocks: [SessionBlock!]!
  confusionFeedbacks: [ConfusionTimestep!]!
  course: Course!
  createdAt: Date!
  description: String
  displayName: String!
  feedbacks: [Feedback!]!
  finishedAt: Date
  id: ID!
  isAudienceInteractionActive: Boolean!
  isGamificationEnabled: Boolean!
  isModerationEnabled: Boolean!
  linkToJoin: String
  name: String!
  namespace: String!
  pinCode: Int
  pointsMultiplier: Int!
  startedAt: Date
  status: SessionStatus!
  updatedAt: Date
}

enum SessionAccessMode {
  PUBLIC
  RESTRICTED
}

type SessionBlock {
  id: Int!
}

enum SessionStatus {
  COMPLETED
  PREPARED
  RUNNING
  SCHEDULED
}

input SubscriptionKeysInput {
  auth: String!
  p256dh: String!
}

input SubscriptionObjectInput {
  endpoint: String!
  expirationTime: Int
  keys: SubscriptionKeysInput!
}

type Tag {
  id: Int!
  name: String!
}

type Title {
  id: Int!
}

type User {
  id: ID!
}