### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum AccessMode {
  PUBLIC
  RESTRICTED
}

type AggregatedConfusionFeedbacks {
  difficulty: Float!
  numberOfParticipants: Int!
  speed: Float!
  timestamp: DateTime
}

type Attachment {
  description: String
  href: String!
  id: ID!
  name: String!
  originalName: String
  type: AttachmentType!
}

input AttachmentInput {
  id: String!
}

enum AttachmentType {
  GIF
  JPEG
  LINK
  PNG
  SVG
  WEBP
}

input AvatarSettingsInput {
  accessory: String!
  clothing: String!
  clothingColor: String!
  eyes: String!
  facialHair: String!
  hair: String!
  hairColor: String!
  mouth: String!
  skinTone: String!
}

type AwardEntry {
  course: Course!
  description: String!
  displayName: String!
  id: Int!
  name: String!
  order: Int!
  participant: Participant
  participantGroup: ParticipantGroup
  type: AwardType!
}

enum AwardType {
  GROUP
  PARTICIPANT
}

type Block {
  blockIx: Int!
  blockStatus: String!
  tabData: [TabData!]
}

input BlockInput {
  questionIds: [Int!]!
  randomSelection: Int
  timeLimit: Int
}

type Choice {
  correct: Boolean
  feedback: String
  id: ID!
  ix: Int!
  value: String!
}

input ChoiceInput {
  correct: Boolean
  feedback: String
  ix: Int!
  value: String!
}

type ChoicesEvaluationData implements EvaluationData {
  content: String!
  id: Int!
  name: String!
  options: ChoicesQuestionOptions!
  type: String!
}

type ChoicesQuestionData implements QuestionData {
  content: String!
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  options: ChoicesQuestionOptions!
  pointsMultiplier: Int
  type: String!
}

type ChoicesQuestionOptions {
  choices: [Choice!]!
}

type ConfusionTimestep {
  createdAt: DateTime!
  difficulty: Int!
  id: Int!
  speed: Int!
}

type Course {
  awards: [AwardEntry!]
  color: String
  createdAt: DateTime
  description: String
  displayName: String!
  id: ID!
  isArchived: Boolean
  leaderboard: [LeaderboardEntry]
  learningElements: [LearningElement!]!
  microSessions: [MicroSession!]!
  name: String!
  numOfActiveParticipants: Int
  numOfParticipants: Int
  participantGroups: [ParticipantGroup]!
  pinCode: Int
  sessions: [Session!]!
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface EvaluationData {
  content: String!
  id: Int!
  name: String!
  type: String!
}

type Feedback {
  content: String!
  createdAt: DateTime
  id: Int!
  isPinned: Boolean!
  isPublished: Boolean!
  isResolved: Boolean!
  resolvedAt: DateTime
  responses: [FeedbackResponse]
  updatedAt: DateTime
  votes: Int!
}

type FeedbackResponse {
  content: String!
  createdAt: DateTime!
  id: Int!
  negativeReactions: Int!
  positiveReactions: Int!
  resolvedAt: DateTime
}

type FreeTextEvaluationData implements EvaluationData {
  content: String!
  id: Int!
  name: String!
  options: FreeTextQuestionOptions!
  type: String!
}

type FreeTextQuestionData implements QuestionData {
  content: String!
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  options: FreeTextQuestionOptions!
  pointsMultiplier: Int
  type: String!
}

type FreeTextQuestionOptions {
  restrictions: FreeTextRestrictions
  solutions: [String!]
}

type FreeTextRestrictions {
  maxLength: Int
}

type GroupActivityClue {
  displayName: String!
  id: ID!
  name: String!
}

type GroupActivityClueWithValue {
  displayName: String!
  id: ID!
  name: String!
  participant: Participant!
  type: ParameterType!
  unit: String
  value: String
}

input GroupActivityDecisionInput {
  id: Int!
  response: String
  selectedOptions: [Int!]
}

type GroupActivityDetails {
  activityInstance: GroupActivityInstance
  clues: [GroupActivityClue!]!
  course: Course!
  description: String
  displayName: String!
  group: ParticipantGroup!
  id: ID!
  instances: [QuestionInstance!]!
  name: String!
  scheduledEndAt: DateTime!
  scheduledStartAt: DateTime!
}

type GroupActivityInstance {
  clues: [GroupActivityClueWithValue!]!
  decisions: [JSONObject!]
  decisionsSubmittedAt: DateTime
  id: Int!
}

type GroupLeaderboardEntry {
  id: ID!
  isMember: Boolean
  name: String!
  rank: Int!
  score: Float!
}

type InstanceEvaluation {
  choices: JSONObject!
  feedbacks: [QuestionFeedback!]
  newPointsFrom: DateTime
  percentile: Float
  pointsAwarded: Float
  score: Float!
}

type InstanceResult {
  blockIx: Int!
  id: ID!
  instanceIx: Int!
  participants: Int!
  questionData: EvaluationData!
  results: JSONObject!
  statistics: Statistics
  status: SessionBlockStatus!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LeaderboardEntry {
  avatar: String
  id: ID!
  isSelf: Boolean
  lastBlockOrder: Int
  participantId: ID!
  participation: Participation
  rank: Int!
  score: Float!
  username: String!
}

type LeaderboardStatistics {
  averageScore: Float!
  participantCount: Int!
}

type LearningElement {
  course: Course
  courseId: String
  description: String
  displayName: String!
  id: ID!
  instances: [QuestionInstance!]
  name: String!
  numOfInstances: Int
  orderType: OrderType!
  pointsMultiplier: Int!
  previousPointsAwarded: Float
  previousScore: Float
  previouslyAnswered: Int
  resetTimeDays: Int!
  totalTrials: Int
}

type MicroSession {
  course: Course!
  description: String
  displayName: String!
  id: ID!
  instances: [QuestionInstance!]
  name: String!
  numOfInstances: Int
  scheduledEndAt: DateTime!
  scheduledStartAt: DateTime!
}

type Mutation {
  activateSessionBlock(sessionBlockId: Int!, sessionId: ID!): Session
  addConfusionTimestep(difficulty: Int!, sessionId: ID!, speed: Int!): ConfusionTimestep
  changeCourseDescription(courseId: ID!, input: String!): Course
  changeSessionSettings(id: ID!, isAudienceInteractionActive: Boolean, isGamificationEnabled: Boolean, isModerationEnabled: Boolean): Session
  createCourse(color: String, displayName: String, name: String!): Course
  createFeedback(content: String!, sessionId: ID!): Feedback
  createParticipantAndJoinCourse(courseId: ID!, password: String!, pin: Int!, username: String!): Participant
  createParticipantGroup(courseId: ID!, name: String!): ParticipantGroup
  createSession(blocks: [BlockInput!]!, courseId: String, displayName: String, isGamificationEnabled: Boolean, name: String!): Session
  deactivateSessionBlock(sessionBlockId: Int!, sessionId: ID!): Session
  deleteFeedback(id: Int!): Feedback
  deleteFeedbackResponse(id: Int!): Feedback
  deleteQuestion(id: Int): Question
  endSession(id: ID!): Session
  joinCourse(courseId: ID!): ParticipantLearningData
  joinCourseWithPin(courseId: ID!, pin: Int!): Participant
  joinParticipantGroup(code: Int!, courseId: ID!): ParticipantGroup
  leaveCourse(courseId: ID!): ParticipantLearningData
  leaveParticipantGroup(courseId: ID!, groupId: ID!): ParticipantGroup
  loginParticipant(password: String!, username: String!): ID
  loginUser(email: String!, password: String!): ID
  logoutParticipant: ID
  logoutUser: ID
  manipulateChoicesQuestion(attachments: [AttachmentInput], content: String, hasAnswerFeedbacks: Boolean, hasSampleSolution: Boolean, id: Int, name: String, options: OptionsChoicesInput, tags: [String], type: String): Question
  manipulateFREETEXTQuestion(attachments: [AttachmentInput], content: String, hasAnswerFeedbacks: Boolean, hasSampleSolution: Boolean, id: Int, name: String, options: OptionsFreeTextInput, tags: [String], type: String): Question
  manipulateNUMERICALQuestion(attachments: [AttachmentInput], content: String, hasAnswerFeedbacks: Boolean, hasSampleSolution: Boolean, id: Int, name: String, options: OptionsNumericalInput, tags: [String], type: String): Question
  markMicroSessionCompleted(courseId: ID!, id: ID!): Participation
  pinFeedback(id: Int!, isPinned: Boolean!): Feedback
  publishFeedback(id: Int!, isPublished: Boolean!): Feedback
  registerParticipantFromLTI(courseId: ID!, participantId: ID!): ParticipantLearningData
  resolveFeedback(id: Int!, isResolved: Boolean!): Feedback
  respondToFeedback(id: Int!, responseContent: String!): Feedback
  respondToQuestionInstance(courseId: ID!, id: Int!, response: ResponseInput!): QuestionInstance
  startGroupActivity(activityId: ID!, groupId: ID!): GroupActivityDetails
  startSession(id: ID!): Session
  submitGroupActivityDecisions(activityInstanceId: Int!, decisions: [GroupActivityDecisionInput!]!): GroupActivityDetails
  subscribeToPush(courseId: ID!, subscriptionObject: SubscriptionObjectInput!): Participation
  updateGroupAverageScores: Boolean
  updateParticipantProfile(avatar: String, avatarSettings: AvatarSettingsInput, password: String, username: String): Participant
  upvoteFeedback(feedbackId: Int!, increment: Int!): Feedback
  voteFeedbackResponse(id: Int!, incrementDownvote: Int!, incrementUpvote: Int!): FeedbackResponse
}

type NumericalEvaluationData implements EvaluationData {
  content: String!
  id: Int!
  name: String!
  options: NumericalQuestionOptions!
  statistics: Statistics
  type: String!
}

type NumericalQuestionData implements QuestionData {
  content: String!
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  options: NumericalQuestionOptions!
  pointsMultiplier: Int
  type: String!
}

type NumericalQuestionOptions {
  accuracy: Int
  placeholder: String
  restrictions: NumericalRestrictions
  solutionRanges: [NumericalSolutionRange!]
  unit: String
}

type NumericalRestrictions {
  max: Int
  min: Int
}

type NumericalSolutionRange {
  max: Float
  min: Float
}

input OptionsChoicesInput {
  choices: [ChoiceInput]!
}

input OptionsFreeTextInput {
  restrictions: Restrictions
  solutions: [String]
}

input OptionsNumericalInput {
  accuracy: Int
  restrictions: Restrictions
  solutionRanges: [SolutionRange]
}

enum OrderType {
  LAST_RESPONSE
  SEQUENTIAL
  SHUFFLED
}

enum ParameterType {
  NUMBER
  STRING
}

type Participant {
  avatar: String
  avatarSettings: JSONObject
  id: ID!
  isSelf: Boolean
  participantGroups: [ParticipantGroup!]
  username: String!
}

type ParticipantGroup {
  averageMemberScore: Float!
  code: Int!
  groupActivityScore: Float!
  id: ID!
  name: String!
  participants: [LeaderboardEntry!]!
  score: Float!
}

type ParticipantLearningData {
  course: Course!
  groupLeaderboard: [GroupLeaderboardEntry!]
  groupLeaderboardStatistics: LeaderboardStatistics!
  id: ID!
  leaderboard: [LeaderboardEntry!]
  leaderboardStatistics: LeaderboardStatistics!
  participant: Participant
  participantToken: String
  participation: Participation
}

type Participation {
  completedMicroSessions: [String]
  course: Course
  id: Int!
  isActive: Boolean!
  participant: Participant
  subscriptions: [PublicSubscriptionData!]
}

type PublicSubscriptionData {
  endpoint: String!
  id: Int!
}

type PushSubscription {
  auth: String!
  endpoint: String!
  expirationTime: Int
  id: Int!
  p256dh: String!
}

type Query {
  basicCourseInformation(courseId: ID!): Course
  cockpitSession(id: ID!): Session
  course(id: ID!): Course
  feedbacks(id: ID!): [Feedback!]
  getCourseOverviewData(courseId: ID!): ParticipantLearningData
  groupActivityDetails(activityId: ID!, groupId: ID!): GroupActivityDetails
  learningElement(id: ID!): LearningElement
  learningElements: [LearningElement!]!
  microSession(id: ID!): MicroSession
  participantGroups(courseId: ID!): [ParticipantGroup!]
  participations(endpoint: String): [Participation!]
  pinnedFeedbacks(id: ID!): Session
  question(id: Int!): Question
  runningSessions(shortname: String!): [Session!]
  self: Participant
  session(id: ID!): Session
  sessionEvaluation(id: ID!): SessionEvaluation
  sessionLeaderboard(sessionId: ID!): [LeaderboardEntry!]
  userCourses: [Course!]
  userProfile: User
  userQuestions: [Question!]
  userSessions: [Session!]
  userTags: [Tag!]
}

type Question {
  attachments: [Attachment!]
  content: String!
  createdAt: DateTime!
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  pointsMultiplier: Int!
  questionData: QuestionData!
  tags: [Tag!]
  type: String!
  updatedAt: DateTime
}

interface QuestionData {
  content: String!
  hasAnswerFeedbacks: Boolean!
  hasSampleSolution: Boolean!
  id: Int!
  isArchived: Boolean!
  isDeleted: Boolean!
  name: String!
  pointsMultiplier: Int
  type: String!
}

type QuestionFeedback {
  correct: Boolean!
  feedback: String!
  ix: Int!
  value: String!
}

type QuestionInstance {
  attachments: [Attachment]
  evaluation: InstanceEvaluation
  id: Int!
  pointsMultiplier: Int!
  questionData: QuestionData!
}

input ResponseInput {
  choices: [Int!]
  value: String
}

input Restrictions {
  max: Float
  maxLength: Int
  min: Float
}

type Session {
  accessMode: AccessMode!
  activeBlock: SessionBlock
  blocks: [SessionBlock!]
  confusionFeedbacks: [AggregatedConfusionFeedbacks]
  course: Course
  createdAt: DateTime!
  displayName: String!
  feedbacks: [Feedback]
  finishedAt: DateTime
  id: ID!
  isAudienceInteractionActive: Boolean!
  isGamificationEnabled: Boolean!
  isModerationEnabled: Boolean!
  linkTo: String
  name: String!
  namespace: String!
  numOfBlocks: Int
  numOfQuestions: Int
  pinCode: Int
  startedAt: DateTime
  status: SessionStatus!
  updatedAt: DateTime
}

type SessionBlock {
  execution: Int!
  expiresAt: DateTime
  id: Int!
  instances: [QuestionInstance!]!
  order: Int!
  randomSelection: Boolean
  status: SessionBlockStatus!
  timeLimit: Int
}

enum SessionBlockStatus {
  ACTIVE
  EXECUTED
  SCHEDULED
}

type SessionEvaluation {
  blocks: [Block!]
  confusionFeedbacks: [ConfusionTimestep!]
  feedbacks: [Feedback!]
  id: ID!
  instanceResults: [InstanceResult!]
  isGamificationEnabled: Boolean!
  status: SessionStatus!
}

enum SessionStatus {
  COMPLETED
  PREPARED
  RUNNING
  SCHEDULED
}

input SolutionRange {
  max: Float
  min: Float
}

type Statistics {
  max: Float
  mean: Float
  median: Float
  min: Float
  q1: Float
  q3: Float
  sd: Float
}

type Subscription {
  feedbackAdded(sessionId: ID!): Feedback
  feedbackCreated(sessionId: ID!): Feedback
  feedbackRemoved(sessionId: ID!): Int
  feedbackUpdated(sessionId: ID!): Feedback
  runningSessionUpdated(sessionId: ID!): SessionBlock
}

input SubscriptionKeys {
  auth: String!
  p256dh: String!
}

input SubscriptionObjectInput {
  endpoint: String!
  expirationTime: Int
  keys: SubscriptionKeys!
}

type TabData {
  id: ID!
  name: String!
  questionIx: Int!
  status: String!
}

type Tag {
  id: ID!
  name: String!
}

type User {
  description: String
  email: String!
  id: ID!
  isActive: Boolean!
  shortname: String!
}