/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSONObject";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AttachmentInput: { // input type
    id: string; // String!
  }
  AvatarSettingsInput: { // input type
    accessory: string; // String!
    clothing: string; // String!
    clothingColor: string; // String!
    eyes: string; // String!
    facialHair: string; // String!
    hair: string; // String!
    hairColor: string; // String!
    mouth: string; // String!
    skinTone: string; // String!
  }
  BlockInput: { // input type
    questionIds: number[]; // [Int!]!
    randomSelection?: number | null; // Int
    timeLimit?: number | null; // Int
  }
  ChoiceInput: { // input type
    correct?: boolean | null; // Boolean
    feedback?: string | null; // String
    ix: number; // Int!
    value: string; // String!
  }
  GroupActivityDecisionInput: { // input type
    id: number; // Int!
    response?: string | null; // String
    selectedOptions?: number[] | null; // [Int!]
  }
  OptionsChoicesInput: { // input type
    choices: Array<NexusGenInputs['ChoiceInput'] | null>; // [ChoiceInput]!
  }
  OptionsFreeTextInput: { // input type
    restrictions?: NexusGenInputs['Restrictions'] | null; // Restrictions
    solutions?: Array<string | null> | null; // [String]
  }
  OptionsNumericalInput: { // input type
    accuracy?: number | null; // Int
    restrictions?: NexusGenInputs['Restrictions'] | null; // Restrictions
    solutionRanges?: Array<NexusGenInputs['SolutionRange'] | null> | null; // [SolutionRange]
  }
  ResponseInput: { // input type
    choices?: number[] | null; // [Int!]
    value?: string | null; // String
  }
  Restrictions: { // input type
    max?: number | null; // Float
    maxLength?: number | null; // Int
    min?: number | null; // Float
  }
  SolutionRange: { // input type
    max?: number | null; // Float
    min?: number | null; // Float
  }
  SubscriptionKeys: { // input type
    auth: string; // String!
    p256dh: string; // String!
  }
  SubscriptionObjectInput: { // input type
    endpoint: string; // String!
    expirationTime?: number | null; // Int
    keys: NexusGenInputs['SubscriptionKeys']; // SubscriptionKeys!
  }
}

export interface NexusGenEnums {
  AccessMode: "PUBLIC" | "RESTRICTED"
  AttachmentType: "GIF" | "JPEG" | "LINK" | "PNG" | "SVG" | "WEBP"
  ParameterType: "NUMBER" | "STRING"
  SessionBlockStatus: "ACTIVE" | "EXECUTED" | "SCHEDULED"
  SessionStatus: "COMPLETED" | "PREPARED" | "RUNNING" | "SCHEDULED"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  JSONObject: any
}

export interface NexusGenObjects {
  AggregatedConfusionFeedbacks: { // root type
    difficulty: number; // Float!
    numberOfParticipants: number; // Int!
    speed: number; // Float!
    timestamp?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Attachment: { // root type
    description?: string | null; // String
    href: string; // String!
    id: string; // ID!
    name: string; // String!
    originalName?: string | null; // String
    type: NexusGenEnums['AttachmentType']; // AttachmentType!
  }
  Block: { // root type
    blockIx: number; // Int!
    blockStatus: string; // String!
    tabData?: NexusGenRootTypes['TabData'][] | null; // [TabData!]
  }
  Choice: { // root type
    correct?: boolean | null; // Boolean
    feedback?: string | null; // String
    id: string; // ID!
    ix: number; // Int!
    value: string; // String!
  }
  ChoicesEvaluationData: { // root type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['ChoicesQuestionOptions']; // ChoicesQuestionOptions!
    type: string; // String!
  }
  ChoicesQuestionData: { // root type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['ChoicesQuestionOptions']; // ChoicesQuestionOptions!
    type: string; // String!
  }
  ChoicesQuestionOptions: { // root type
    choices: NexusGenRootTypes['Choice'][]; // [Choice!]!
  }
  ConfusionTimestep: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    difficulty: number; // Int!
    id: number; // Int!
    speed: number; // Int!
  }
  Course: { // root type
    color?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    displayName: string; // String!
    id: string; // ID!
    isArchived?: boolean | null; // Boolean
    learningElements: NexusGenRootTypes['LearningElement'][]; // [LearningElement!]!
    microSessions: NexusGenRootTypes['MicroSession'][]; // [MicroSession!]!
    name: string; // String!
    participantGroups: Array<NexusGenRootTypes['ParticipantGroup'] | null>; // [ParticipantGroup]!
    pinCode?: number | null; // Int
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Feedback: { // root type
    content: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isPinned: boolean; // Boolean!
    isPublished: boolean; // Boolean!
    isResolved: boolean; // Boolean!
    resolvedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    responses?: Array<NexusGenRootTypes['FeedbackResponse'] | null> | null; // [FeedbackResponse]
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    votes: number; // Int!
  }
  FeedbackResponse: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    negativeReactions: number; // Int!
    positiveReactions: number; // Int!
    resolvedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  FreeTextEvaluationData: { // root type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['FreeTextQuestionOptions']; // FreeTextQuestionOptions!
    type: string; // String!
  }
  FreeTextQuestionData: { // root type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['FreeTextQuestionOptions']; // FreeTextQuestionOptions!
    type: string; // String!
  }
  FreeTextQuestionOptions: { // root type
    restrictions?: NexusGenRootTypes['FreeTextRestrictions'] | null; // FreeTextRestrictions
    solutions?: string[] | null; // [String!]
  }
  FreeTextRestrictions: { // root type
    maxLength?: number | null; // Int
  }
  GroupActivityClue: { // root type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  GroupActivityClueWithValue: { // root type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
    participant: NexusGenRootTypes['Participant']; // Participant!
    type: NexusGenEnums['ParameterType']; // ParameterType!
    unit?: string | null; // String
    value?: string | null; // String
  }
  GroupActivityDetails: { // root type
    activityInstance?: NexusGenRootTypes['GroupActivityInstance'] | null; // GroupActivityInstance
    clues: NexusGenRootTypes['GroupActivityClue'][]; // [GroupActivityClue!]!
    course: NexusGenRootTypes['Course']; // Course!
    description?: string | null; // String
    displayName: string; // String!
    group: NexusGenRootTypes['ParticipantGroup']; // ParticipantGroup!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
    scheduledEndAt: NexusGenScalars['DateTime']; // DateTime!
    scheduledStartAt: NexusGenScalars['DateTime']; // DateTime!
  }
  GroupActivityInstance: { // root type
    clues: NexusGenRootTypes['GroupActivityClueWithValue'][]; // [GroupActivityClueWithValue!]!
    decisions?: NexusGenScalars['JSONObject'][] | null; // [JSONObject!]
    decisionsSubmittedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
  }
  GroupLeaderboardEntry: { // root type
    id: string; // ID!
    isMember?: boolean | null; // Boolean
    name: string; // String!
    rank: number; // Int!
    score: number; // Float!
  }
  InstanceEvaluation: { // root type
    choices: NexusGenScalars['JSONObject']; // JSONObject!
    feedbacks?: NexusGenRootTypes['QuestionFeedback'][] | null; // [QuestionFeedback!]
    newPointsFrom?: NexusGenScalars['DateTime'] | null; // DateTime
    percentile?: number | null; // Float
    pointsAwarded?: number | null; // Float
    score: number; // Float!
  }
  InstanceResults: { // root type
    blockIx: number; // Int!
    id: string; // ID!
    instanceIx: number; // Int!
    participants: number; // Int!
    questionData: NexusGenRootTypes['EvaluationData']; // EvaluationData!
    results: NexusGenScalars['JSONObject']; // JSONObject!
    status: NexusGenEnums['SessionBlockStatus']; // SessionBlockStatus!
  }
  LeaderboardEntry: { // root type
    avatar?: string | null; // String
    id: string; // ID!
    isSelf?: boolean | null; // Boolean
    lastBlockOrder?: number | null; // Int
    participantId: string; // ID!
    rank: number; // Int!
    score: number; // Float!
    username: string; // String!
  }
  LeaderboardStatistics: { // root type
    averageScore: number; // Float!
    participantCount: number; // Int!
  }
  LearningElement: { // root type
    course: NexusGenRootTypes['Course']; // Course!
    displayName: string; // String!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
  }
  MicroSession: { // root type
    course: NexusGenRootTypes['Course']; // Course!
    description?: string | null; // String
    displayName: string; // String!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
    scheduledEndAt: NexusGenScalars['DateTime']; // DateTime!
    scheduledStartAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  NumericalEvaluationData: { // root type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['NumericalQuestionOptions']; // NumericalQuestionOptions!
    statistics?: NexusGenRootTypes['Statistics'] | null; // Statistics
    type: string; // String!
  }
  NumericalQuestionData: { // root type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['NumericalQuestionOptions']; // NumericalQuestionOptions!
    statistics?: NexusGenRootTypes['Statistics'] | null; // Statistics
    type: string; // String!
  }
  NumericalQuestionOptions: { // root type
    accuracy?: number | null; // Int
    placeholder?: string | null; // String
    restrictions?: NexusGenRootTypes['NumericalRestrictions'] | null; // NumericalRestrictions
    solutionRanges?: NexusGenRootTypes['NumericalSolutionRange'][] | null; // [NumericalSolutionRange!]
    unit?: string | null; // String
  }
  NumericalRestrictions: { // root type
    max?: number | null; // Int
    min?: number | null; // Int
  }
  NumericalSolutionRange: { // root type
    max?: number | null; // Float
    min?: number | null; // Float
  }
  Participant: { // root type
    avatar?: string | null; // String
    avatarSettings?: NexusGenScalars['JSONObject'] | null; // JSONObject
    id: string; // ID!
    isSelf?: boolean | null; // Boolean
    participantGroups?: NexusGenRootTypes['ParticipantGroup'][] | null; // [ParticipantGroup!]
    username: string; // String!
  }
  ParticipantGroup: { // root type
    averageMemberScore: number; // Float!
    code: number; // Int!
    groupActivityScore: number; // Float!
    id: string; // ID!
    name: string; // String!
    participants: NexusGenRootTypes['LeaderboardEntry'][]; // [LeaderboardEntry!]!
    score: number; // Float!
  }
  ParticipantLearningData: { // root type
    course: NexusGenRootTypes['Course']; // Course!
    groupLeaderboard?: NexusGenRootTypes['GroupLeaderboardEntry'][] | null; // [GroupLeaderboardEntry!]
    groupLeaderboardStatistics: NexusGenRootTypes['LeaderboardStatistics']; // LeaderboardStatistics!
    id: string; // ID!
    leaderboard?: NexusGenRootTypes['LeaderboardEntry'][] | null; // [LeaderboardEntry!]
    leaderboardStatistics: NexusGenRootTypes['LeaderboardStatistics']; // LeaderboardStatistics!
    participant?: NexusGenRootTypes['Participant'] | null; // Participant
    participantToken?: string | null; // String
    participation?: NexusGenRootTypes['Participation'] | null; // Participation
  }
  Participation: { // root type
    completedMicroSessions?: Array<string | null> | null; // [String]
    course?: NexusGenRootTypes['Course'] | null; // Course
    id: number; // Int!
    isActive: boolean; // Boolean!
    subscriptions?: NexusGenRootTypes['PublicSubscriptionData'][] | null; // [PublicSubscriptionData!]
  }
  PublicSubscriptionData: { // root type
    endpoint: string; // String!
    id: number; // Int!
  }
  PushSubscription: { // root type
    auth: string; // String!
    endpoint: string; // String!
    expirationTime?: number | null; // Int
    id: number; // Int!
    p256dh: string; // String!
  }
  Query: {};
  Question: { // root type
    attachments?: NexusGenRootTypes['Attachment'][] | null; // [Attachment!]
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    questionData: NexusGenRootTypes['QuestionData']; // QuestionData!
    tags?: NexusGenRootTypes['Tag'][] | null; // [Tag!]
    type: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  QuestionFeedback: { // root type
    correct: boolean; // Boolean!
    feedback: string; // String!
    ix: number; // Int!
    value: string; // String!
  }
  QuestionInstance: { // root type
    attachments?: Array<NexusGenRootTypes['Attachment'] | null> | null; // [Attachment]
    evaluation?: NexusGenRootTypes['InstanceEvaluation'] | null; // InstanceEvaluation
    id: number; // Int!
    questionData: NexusGenRootTypes['QuestionData']; // QuestionData!
  }
  Session: { // root type
    accessMode: NexusGenEnums['AccessMode']; // AccessMode!
    activeBlock?: NexusGenRootTypes['SessionBlock'] | null; // SessionBlock
    blocks?: NexusGenRootTypes['SessionBlock'][] | null; // [SessionBlock!]
    confusionFeedbacks?: Array<NexusGenRootTypes['AggregatedConfusionFeedbacks'] | null> | null; // [AggregatedConfusionFeedbacks]
    course?: NexusGenRootTypes['Course'] | null; // Course
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    feedbacks?: Array<NexusGenRootTypes['Feedback'] | null> | null; // [Feedback]
    finishedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    isAudienceInteractionActive: boolean; // Boolean!
    isGamificationEnabled: boolean; // Boolean!
    isModerationEnabled: boolean; // Boolean!
    linkTo?: string | null; // String
    name: string; // String!
    namespace: string; // String!
    startedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    status: NexusGenEnums['SessionStatus']; // SessionStatus!
  }
  SessionBlock: { // root type
    execution: number; // Int!
    expiresAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    order: number; // Int!
    randomSelection?: boolean | null; // Boolean
    status: NexusGenEnums['SessionBlockStatus']; // SessionBlockStatus!
    timeLimit?: number | null; // Int
  }
  SessionEvaluation: { // root type
    blocks?: NexusGenRootTypes['Block'][] | null; // [Block!]
    id: string; // ID!
    instanceResults?: NexusGenRootTypes['InstanceResults'][] | null; // [InstanceResults!]
  }
  Statistics: { // root type
    max?: number | null; // Float
    mean?: number | null; // Float
    median?: number | null; // Float
    min?: number | null; // Float
    q1?: number | null; // Float
    q3?: number | null; // Float
    sd?: number | null; // Float
  }
  Subscription: {};
  TabData: { // root type
    id: string; // ID!
    name: string; // String!
    questionIx: number; // Int!
    status: string; // String!
  }
  Tag: { // root type
    id: string; // ID!
    name: string; // String!
  }
  User: { // root type
    description?: string | null; // String
    email: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    shortname: string; // String!
  }
}

export interface NexusGenInterfaces {
  EvaluationData: NexusGenRootTypes['ChoicesEvaluationData'] | NexusGenRootTypes['FreeTextEvaluationData'] | NexusGenRootTypes['NumericalEvaluationData'];
  QuestionData: NexusGenRootTypes['ChoicesQuestionData'] | NexusGenRootTypes['FreeTextQuestionData'] | NexusGenRootTypes['NumericalQuestionData'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AggregatedConfusionFeedbacks: { // field return type
    difficulty: number; // Float!
    numberOfParticipants: number; // Int!
    speed: number; // Float!
    timestamp: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Attachment: { // field return type
    description: string | null; // String
    href: string; // String!
    id: string; // ID!
    name: string; // String!
    originalName: string | null; // String
    type: NexusGenEnums['AttachmentType']; // AttachmentType!
  }
  Block: { // field return type
    blockIx: number; // Int!
    blockStatus: string; // String!
    tabData: NexusGenRootTypes['TabData'][] | null; // [TabData!]
  }
  Choice: { // field return type
    correct: boolean | null; // Boolean
    feedback: string | null; // String
    id: string; // ID!
    ix: number; // Int!
    value: string; // String!
  }
  ChoicesEvaluationData: { // field return type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['ChoicesQuestionOptions']; // ChoicesQuestionOptions!
    type: string; // String!
  }
  ChoicesQuestionData: { // field return type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['ChoicesQuestionOptions']; // ChoicesQuestionOptions!
    type: string; // String!
  }
  ChoicesQuestionOptions: { // field return type
    choices: NexusGenRootTypes['Choice'][]; // [Choice!]!
  }
  ConfusionTimestep: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    difficulty: number; // Int!
    id: number; // Int!
    speed: number; // Int!
  }
  Course: { // field return type
    color: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    displayName: string; // String!
    id: string; // ID!
    isArchived: boolean | null; // Boolean
    learningElements: NexusGenRootTypes['LearningElement'][]; // [LearningElement!]!
    microSessions: NexusGenRootTypes['MicroSession'][]; // [MicroSession!]!
    name: string; // String!
    participantGroups: Array<NexusGenRootTypes['ParticipantGroup'] | null>; // [ParticipantGroup]!
    pinCode: number | null; // Int
    sessions: NexusGenRootTypes['Session'][]; // [Session!]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Feedback: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    isPinned: boolean; // Boolean!
    isPublished: boolean; // Boolean!
    isResolved: boolean; // Boolean!
    resolvedAt: NexusGenScalars['DateTime'] | null; // DateTime
    responses: Array<NexusGenRootTypes['FeedbackResponse'] | null> | null; // [FeedbackResponse]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    votes: number; // Int!
  }
  FeedbackResponse: { // field return type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    negativeReactions: number; // Int!
    positiveReactions: number; // Int!
    resolvedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  FreeTextEvaluationData: { // field return type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['FreeTextQuestionOptions']; // FreeTextQuestionOptions!
    type: string; // String!
  }
  FreeTextQuestionData: { // field return type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['FreeTextQuestionOptions']; // FreeTextQuestionOptions!
    type: string; // String!
  }
  FreeTextQuestionOptions: { // field return type
    restrictions: NexusGenRootTypes['FreeTextRestrictions'] | null; // FreeTextRestrictions
    solutions: string[] | null; // [String!]
  }
  FreeTextRestrictions: { // field return type
    maxLength: number | null; // Int
  }
  GroupActivityClue: { // field return type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
  }
  GroupActivityClueWithValue: { // field return type
    displayName: string; // String!
    id: string; // ID!
    name: string; // String!
    participant: NexusGenRootTypes['Participant']; // Participant!
    type: NexusGenEnums['ParameterType']; // ParameterType!
    unit: string | null; // String
    value: string | null; // String
  }
  GroupActivityDetails: { // field return type
    activityInstance: NexusGenRootTypes['GroupActivityInstance'] | null; // GroupActivityInstance
    clues: NexusGenRootTypes['GroupActivityClue'][]; // [GroupActivityClue!]!
    course: NexusGenRootTypes['Course']; // Course!
    description: string | null; // String
    displayName: string; // String!
    group: NexusGenRootTypes['ParticipantGroup']; // ParticipantGroup!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
    scheduledEndAt: NexusGenScalars['DateTime']; // DateTime!
    scheduledStartAt: NexusGenScalars['DateTime']; // DateTime!
  }
  GroupActivityInstance: { // field return type
    clues: NexusGenRootTypes['GroupActivityClueWithValue'][]; // [GroupActivityClueWithValue!]!
    decisions: NexusGenScalars['JSONObject'][] | null; // [JSONObject!]
    decisionsSubmittedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
  }
  GroupLeaderboardEntry: { // field return type
    id: string; // ID!
    isMember: boolean | null; // Boolean
    name: string; // String!
    rank: number; // Int!
    score: number; // Float!
  }
  InstanceEvaluation: { // field return type
    choices: NexusGenScalars['JSONObject']; // JSONObject!
    feedbacks: NexusGenRootTypes['QuestionFeedback'][] | null; // [QuestionFeedback!]
    newPointsFrom: NexusGenScalars['DateTime'] | null; // DateTime
    percentile: number | null; // Float
    pointsAwarded: number | null; // Float
    score: number; // Float!
  }
  InstanceResults: { // field return type
    blockIx: number; // Int!
    id: string; // ID!
    instanceIx: number; // Int!
    participants: number; // Int!
    questionData: NexusGenRootTypes['EvaluationData']; // EvaluationData!
    results: NexusGenScalars['JSONObject']; // JSONObject!
    status: NexusGenEnums['SessionBlockStatus']; // SessionBlockStatus!
  }
  LeaderboardEntry: { // field return type
    avatar: string | null; // String
    id: string; // ID!
    isSelf: boolean | null; // Boolean
    lastBlockOrder: number | null; // Int
    participantId: string; // ID!
    rank: number; // Int!
    score: number; // Float!
    username: string; // String!
  }
  LeaderboardStatistics: { // field return type
    averageScore: number; // Float!
    participantCount: number; // Int!
  }
  LearningElement: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
    displayName: string; // String!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
  }
  MicroSession: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
    description: string | null; // String
    displayName: string; // String!
    id: string; // ID!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    name: string; // String!
    scheduledEndAt: NexusGenScalars['DateTime']; // DateTime!
    scheduledStartAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: { // field return type
    activateSessionBlock: NexusGenRootTypes['Session'] | null; // Session
    addConfusionTimestep: NexusGenRootTypes['ConfusionTimestep'] | null; // ConfusionTimestep
    changeSessionSettings: NexusGenRootTypes['Session'] | null; // Session
    createCourse: NexusGenRootTypes['Course'] | null; // Course
    createFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    createParticipantAndJoinCourse: NexusGenRootTypes['Participant'] | null; // Participant
    createParticipantGroup: NexusGenRootTypes['ParticipantGroup'] | null; // ParticipantGroup
    createSession: NexusGenRootTypes['Session'] | null; // Session
    deactivateSessionBlock: NexusGenRootTypes['Session'] | null; // Session
    deleteFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    deleteFeedbackResponse: NexusGenRootTypes['Feedback'] | null; // Feedback
    deleteQuestion: NexusGenRootTypes['Question'] | null; // Question
    endSession: NexusGenRootTypes['Session'] | null; // Session
    joinCourse: NexusGenRootTypes['ParticipantLearningData'] | null; // ParticipantLearningData
    joinCourseWithPin: NexusGenRootTypes['Participant'] | null; // Participant
    joinParticipantGroup: NexusGenRootTypes['ParticipantGroup'] | null; // ParticipantGroup
    leaveCourse: NexusGenRootTypes['ParticipantLearningData'] | null; // ParticipantLearningData
    leaveParticipantGroup: NexusGenRootTypes['ParticipantGroup'] | null; // ParticipantGroup
    loginParticipant: string | null; // ID
    loginUser: string | null; // ID
    logoutParticipant: string | null; // ID
    logoutUser: string | null; // ID
    manipulateChoicesQuestion: NexusGenRootTypes['Question'] | null; // Question
    manipulateFREETEXTQuestion: NexusGenRootTypes['Question'] | null; // Question
    manipulateNUMERICALQuestion: NexusGenRootTypes['Question'] | null; // Question
    markMicroSessionCompleted: NexusGenRootTypes['Participation'] | null; // Participation
    pinFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    publishFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    registerParticipantFromLTI: NexusGenRootTypes['ParticipantLearningData'] | null; // ParticipantLearningData
    resolveFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    respondToFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    respondToQuestionInstance: NexusGenRootTypes['QuestionInstance'] | null; // QuestionInstance
    startGroupActivity: NexusGenRootTypes['GroupActivityDetails'] | null; // GroupActivityDetails
    startSession: NexusGenRootTypes['Session'] | null; // Session
    submitGroupActivityDecisions: NexusGenRootTypes['GroupActivityDetails'] | null; // GroupActivityDetails
    subscribeToPush: NexusGenRootTypes['Participation'] | null; // Participation
    updateGroupAverageScores: boolean | null; // Boolean
    updateParticipantProfile: NexusGenRootTypes['Participant'] | null; // Participant
    upvoteFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    voteFeedbackResponse: NexusGenRootTypes['FeedbackResponse'] | null; // FeedbackResponse
  }
  NumericalEvaluationData: { // field return type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    options: NexusGenRootTypes['NumericalQuestionOptions']; // NumericalQuestionOptions!
    statistics: NexusGenRootTypes['Statistics'] | null; // Statistics
    type: string; // String!
  }
  NumericalQuestionData: { // field return type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    options: NexusGenRootTypes['NumericalQuestionOptions']; // NumericalQuestionOptions!
    statistics: NexusGenRootTypes['Statistics'] | null; // Statistics
    type: string; // String!
  }
  NumericalQuestionOptions: { // field return type
    accuracy: number | null; // Int
    placeholder: string | null; // String
    restrictions: NexusGenRootTypes['NumericalRestrictions'] | null; // NumericalRestrictions
    solutionRanges: NexusGenRootTypes['NumericalSolutionRange'][] | null; // [NumericalSolutionRange!]
    unit: string | null; // String
  }
  NumericalRestrictions: { // field return type
    max: number | null; // Int
    min: number | null; // Int
  }
  NumericalSolutionRange: { // field return type
    max: number | null; // Float
    min: number | null; // Float
  }
  Participant: { // field return type
    avatar: string | null; // String
    avatarSettings: NexusGenScalars['JSONObject'] | null; // JSONObject
    id: string; // ID!
    isSelf: boolean | null; // Boolean
    participantGroups: NexusGenRootTypes['ParticipantGroup'][] | null; // [ParticipantGroup!]
    username: string; // String!
  }
  ParticipantGroup: { // field return type
    averageMemberScore: number; // Float!
    code: number; // Int!
    groupActivityScore: number; // Float!
    id: string; // ID!
    name: string; // String!
    participants: NexusGenRootTypes['LeaderboardEntry'][]; // [LeaderboardEntry!]!
    score: number; // Float!
  }
  ParticipantLearningData: { // field return type
    course: NexusGenRootTypes['Course']; // Course!
    groupLeaderboard: NexusGenRootTypes['GroupLeaderboardEntry'][] | null; // [GroupLeaderboardEntry!]
    groupLeaderboardStatistics: NexusGenRootTypes['LeaderboardStatistics']; // LeaderboardStatistics!
    id: string; // ID!
    leaderboard: NexusGenRootTypes['LeaderboardEntry'][] | null; // [LeaderboardEntry!]
    leaderboardStatistics: NexusGenRootTypes['LeaderboardStatistics']; // LeaderboardStatistics!
    participant: NexusGenRootTypes['Participant'] | null; // Participant
    participantToken: string | null; // String
    participation: NexusGenRootTypes['Participation'] | null; // Participation
  }
  Participation: { // field return type
    completedMicroSessions: Array<string | null> | null; // [String]
    course: NexusGenRootTypes['Course'] | null; // Course
    id: number; // Int!
    isActive: boolean; // Boolean!
    subscriptions: NexusGenRootTypes['PublicSubscriptionData'][] | null; // [PublicSubscriptionData!]
  }
  PublicSubscriptionData: { // field return type
    endpoint: string; // String!
    id: number; // Int!
  }
  PushSubscription: { // field return type
    auth: string; // String!
    endpoint: string; // String!
    expirationTime: number | null; // Int
    id: number; // Int!
    p256dh: string; // String!
  }
  Query: { // field return type
    basicCourseInformation: NexusGenRootTypes['Course'] | null; // Course
    cockpitSession: NexusGenRootTypes['Session'] | null; // Session
    feedbacks: NexusGenRootTypes['Feedback'][] | null; // [Feedback!]
    getCourseOverviewData: NexusGenRootTypes['ParticipantLearningData'] | null; // ParticipantLearningData
    groupActivityDetails: NexusGenRootTypes['GroupActivityDetails'] | null; // GroupActivityDetails
    learningElement: NexusGenRootTypes['LearningElement'] | null; // LearningElement
    microSession: NexusGenRootTypes['MicroSession'] | null; // MicroSession
    participantGroups: NexusGenRootTypes['ParticipantGroup'][] | null; // [ParticipantGroup!]
    participations: NexusGenRootTypes['Participation'][] | null; // [Participation!]
    pinnedFeedbacks: NexusGenRootTypes['Session'] | null; // Session
    question: NexusGenRootTypes['Question'] | null; // Question
    runningSessions: NexusGenRootTypes['Session'][] | null; // [Session!]
    self: NexusGenRootTypes['Participant'] | null; // Participant
    session: NexusGenRootTypes['Session'] | null; // Session
    sessionEvaluation: NexusGenRootTypes['SessionEvaluation'] | null; // SessionEvaluation
    sessionLeaderboard: NexusGenRootTypes['LeaderboardEntry'][] | null; // [LeaderboardEntry!]
    userCourses: NexusGenRootTypes['Course'][] | null; // [Course!]
    userProfile: NexusGenRootTypes['User'] | null; // User
    userQuestions: NexusGenRootTypes['Question'][] | null; // [Question!]
    userSessions: NexusGenRootTypes['Session'][] | null; // [Session!]
  }
  Question: { // field return type
    attachments: NexusGenRootTypes['Attachment'][] | null; // [Attachment!]
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    questionData: NexusGenRootTypes['QuestionData']; // QuestionData!
    tags: NexusGenRootTypes['Tag'][] | null; // [Tag!]
    type: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  QuestionFeedback: { // field return type
    correct: boolean; // Boolean!
    feedback: string; // String!
    ix: number; // Int!
    value: string; // String!
  }
  QuestionInstance: { // field return type
    attachments: Array<NexusGenRootTypes['Attachment'] | null> | null; // [Attachment]
    evaluation: NexusGenRootTypes['InstanceEvaluation'] | null; // InstanceEvaluation
    id: number; // Int!
    questionData: NexusGenRootTypes['QuestionData']; // QuestionData!
  }
  Session: { // field return type
    accessMode: NexusGenEnums['AccessMode']; // AccessMode!
    activeBlock: NexusGenRootTypes['SessionBlock'] | null; // SessionBlock
    blocks: NexusGenRootTypes['SessionBlock'][] | null; // [SessionBlock!]
    confusionFeedbacks: Array<NexusGenRootTypes['AggregatedConfusionFeedbacks'] | null> | null; // [AggregatedConfusionFeedbacks]
    course: NexusGenRootTypes['Course'] | null; // Course
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    feedbacks: Array<NexusGenRootTypes['Feedback'] | null> | null; // [Feedback]
    finishedAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    isAudienceInteractionActive: boolean; // Boolean!
    isGamificationEnabled: boolean; // Boolean!
    isModerationEnabled: boolean; // Boolean!
    linkTo: string | null; // String
    name: string; // String!
    namespace: string; // String!
    startedAt: NexusGenScalars['DateTime'] | null; // DateTime
    status: NexusGenEnums['SessionStatus']; // SessionStatus!
  }
  SessionBlock: { // field return type
    execution: number; // Int!
    expiresAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    instances: NexusGenRootTypes['QuestionInstance'][]; // [QuestionInstance!]!
    order: number; // Int!
    randomSelection: boolean | null; // Boolean
    status: NexusGenEnums['SessionBlockStatus']; // SessionBlockStatus!
    timeLimit: number | null; // Int
  }
  SessionEvaluation: { // field return type
    blocks: NexusGenRootTypes['Block'][] | null; // [Block!]
    id: string; // ID!
    instanceResults: NexusGenRootTypes['InstanceResults'][] | null; // [InstanceResults!]
  }
  Statistics: { // field return type
    max: number | null; // Float
    mean: number | null; // Float
    median: number | null; // Float
    min: number | null; // Float
    q1: number | null; // Float
    q3: number | null; // Float
    sd: number | null; // Float
  }
  Subscription: { // field return type
    feedbackAdded: NexusGenRootTypes['Feedback'] | null; // Feedback
    feedbackCreated: NexusGenRootTypes['Feedback'] | null; // Feedback
    feedbackRemoved: number | null; // Int
    feedbackUpdated: NexusGenRootTypes['Feedback'] | null; // Feedback
    runningSessionUpdated: NexusGenRootTypes['SessionBlock'] | null; // SessionBlock
  }
  TabData: { // field return type
    id: string; // ID!
    name: string; // String!
    questionIx: number; // Int!
    status: string; // String!
  }
  Tag: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  User: { // field return type
    description: string | null; // String
    email: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    shortname: string; // String!
  }
  EvaluationData: { // field return type
    content: string; // String!
    id: number; // Int!
    name: string; // String!
    type: string; // String!
  }
  QuestionData: { // field return type
    content: string; // String!
    hasAnswerFeedbacks: boolean; // Boolean!
    hasSampleSolution: boolean; // Boolean!
    id: number; // Int!
    isArchived: boolean; // Boolean!
    isDeleted: boolean; // Boolean!
    name: string; // String!
    type: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AggregatedConfusionFeedbacks: { // field return type name
    difficulty: 'Float'
    numberOfParticipants: 'Int'
    speed: 'Float'
    timestamp: 'DateTime'
  }
  Attachment: { // field return type name
    description: 'String'
    href: 'String'
    id: 'ID'
    name: 'String'
    originalName: 'String'
    type: 'AttachmentType'
  }
  Block: { // field return type name
    blockIx: 'Int'
    blockStatus: 'String'
    tabData: 'TabData'
  }
  Choice: { // field return type name
    correct: 'Boolean'
    feedback: 'String'
    id: 'ID'
    ix: 'Int'
    value: 'String'
  }
  ChoicesEvaluationData: { // field return type name
    content: 'String'
    id: 'Int'
    name: 'String'
    options: 'ChoicesQuestionOptions'
    type: 'String'
  }
  ChoicesQuestionData: { // field return type name
    content: 'String'
    hasAnswerFeedbacks: 'Boolean'
    hasSampleSolution: 'Boolean'
    id: 'Int'
    isArchived: 'Boolean'
    isDeleted: 'Boolean'
    name: 'String'
    options: 'ChoicesQuestionOptions'
    type: 'String'
  }
  ChoicesQuestionOptions: { // field return type name
    choices: 'Choice'
  }
  ConfusionTimestep: { // field return type name
    createdAt: 'DateTime'
    difficulty: 'Int'
    id: 'Int'
    speed: 'Int'
  }
  Course: { // field return type name
    color: 'String'
    createdAt: 'DateTime'
    description: 'String'
    displayName: 'String'
    id: 'ID'
    isArchived: 'Boolean'
    learningElements: 'LearningElement'
    microSessions: 'MicroSession'
    name: 'String'
    participantGroups: 'ParticipantGroup'
    pinCode: 'Int'
    sessions: 'Session'
    updatedAt: 'DateTime'
  }
  Feedback: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    isPinned: 'Boolean'
    isPublished: 'Boolean'
    isResolved: 'Boolean'
    resolvedAt: 'DateTime'
    responses: 'FeedbackResponse'
    updatedAt: 'DateTime'
    votes: 'Int'
  }
  FeedbackResponse: { // field return type name
    content: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    negativeReactions: 'Int'
    positiveReactions: 'Int'
    resolvedAt: 'DateTime'
  }
  FreeTextEvaluationData: { // field return type name
    content: 'String'
    id: 'Int'
    name: 'String'
    options: 'FreeTextQuestionOptions'
    type: 'String'
  }
  FreeTextQuestionData: { // field return type name
    content: 'String'
    hasAnswerFeedbacks: 'Boolean'
    hasSampleSolution: 'Boolean'
    id: 'Int'
    isArchived: 'Boolean'
    isDeleted: 'Boolean'
    name: 'String'
    options: 'FreeTextQuestionOptions'
    type: 'String'
  }
  FreeTextQuestionOptions: { // field return type name
    restrictions: 'FreeTextRestrictions'
    solutions: 'String'
  }
  FreeTextRestrictions: { // field return type name
    maxLength: 'Int'
  }
  GroupActivityClue: { // field return type name
    displayName: 'String'
    id: 'ID'
    name: 'String'
  }
  GroupActivityClueWithValue: { // field return type name
    displayName: 'String'
    id: 'ID'
    name: 'String'
    participant: 'Participant'
    type: 'ParameterType'
    unit: 'String'
    value: 'String'
  }
  GroupActivityDetails: { // field return type name
    activityInstance: 'GroupActivityInstance'
    clues: 'GroupActivityClue'
    course: 'Course'
    description: 'String'
    displayName: 'String'
    group: 'ParticipantGroup'
    id: 'ID'
    instances: 'QuestionInstance'
    name: 'String'
    scheduledEndAt: 'DateTime'
    scheduledStartAt: 'DateTime'
  }
  GroupActivityInstance: { // field return type name
    clues: 'GroupActivityClueWithValue'
    decisions: 'JSONObject'
    decisionsSubmittedAt: 'DateTime'
    id: 'Int'
  }
  GroupLeaderboardEntry: { // field return type name
    id: 'ID'
    isMember: 'Boolean'
    name: 'String'
    rank: 'Int'
    score: 'Float'
  }
  InstanceEvaluation: { // field return type name
    choices: 'JSONObject'
    feedbacks: 'QuestionFeedback'
    newPointsFrom: 'DateTime'
    percentile: 'Float'
    pointsAwarded: 'Float'
    score: 'Float'
  }
  InstanceResults: { // field return type name
    blockIx: 'Int'
    id: 'ID'
    instanceIx: 'Int'
    participants: 'Int'
    questionData: 'EvaluationData'
    results: 'JSONObject'
    status: 'SessionBlockStatus'
  }
  LeaderboardEntry: { // field return type name
    avatar: 'String'
    id: 'ID'
    isSelf: 'Boolean'
    lastBlockOrder: 'Int'
    participantId: 'ID'
    rank: 'Int'
    score: 'Float'
    username: 'String'
  }
  LeaderboardStatistics: { // field return type name
    averageScore: 'Float'
    participantCount: 'Int'
  }
  LearningElement: { // field return type name
    course: 'Course'
    displayName: 'String'
    id: 'ID'
    instances: 'QuestionInstance'
    name: 'String'
  }
  MicroSession: { // field return type name
    course: 'Course'
    description: 'String'
    displayName: 'String'
    id: 'ID'
    instances: 'QuestionInstance'
    name: 'String'
    scheduledEndAt: 'DateTime'
    scheduledStartAt: 'DateTime'
  }
  Mutation: { // field return type name
    activateSessionBlock: 'Session'
    addConfusionTimestep: 'ConfusionTimestep'
    changeSessionSettings: 'Session'
    createCourse: 'Course'
    createFeedback: 'Feedback'
    createParticipantAndJoinCourse: 'Participant'
    createParticipantGroup: 'ParticipantGroup'
    createSession: 'Session'
    deactivateSessionBlock: 'Session'
    deleteFeedback: 'Feedback'
    deleteFeedbackResponse: 'Feedback'
    deleteQuestion: 'Question'
    endSession: 'Session'
    joinCourse: 'ParticipantLearningData'
    joinCourseWithPin: 'Participant'
    joinParticipantGroup: 'ParticipantGroup'
    leaveCourse: 'ParticipantLearningData'
    leaveParticipantGroup: 'ParticipantGroup'
    loginParticipant: 'ID'
    loginUser: 'ID'
    logoutParticipant: 'ID'
    logoutUser: 'ID'
    manipulateChoicesQuestion: 'Question'
    manipulateFREETEXTQuestion: 'Question'
    manipulateNUMERICALQuestion: 'Question'
    markMicroSessionCompleted: 'Participation'
    pinFeedback: 'Feedback'
    publishFeedback: 'Feedback'
    registerParticipantFromLTI: 'ParticipantLearningData'
    resolveFeedback: 'Feedback'
    respondToFeedback: 'Feedback'
    respondToQuestionInstance: 'QuestionInstance'
    startGroupActivity: 'GroupActivityDetails'
    startSession: 'Session'
    submitGroupActivityDecisions: 'GroupActivityDetails'
    subscribeToPush: 'Participation'
    updateGroupAverageScores: 'Boolean'
    updateParticipantProfile: 'Participant'
    upvoteFeedback: 'Feedback'
    voteFeedbackResponse: 'FeedbackResponse'
  }
  NumericalEvaluationData: { // field return type name
    content: 'String'
    id: 'Int'
    name: 'String'
    options: 'NumericalQuestionOptions'
    statistics: 'Statistics'
    type: 'String'
  }
  NumericalQuestionData: { // field return type name
    content: 'String'
    hasAnswerFeedbacks: 'Boolean'
    hasSampleSolution: 'Boolean'
    id: 'Int'
    isArchived: 'Boolean'
    isDeleted: 'Boolean'
    name: 'String'
    options: 'NumericalQuestionOptions'
    statistics: 'Statistics'
    type: 'String'
  }
  NumericalQuestionOptions: { // field return type name
    accuracy: 'Int'
    placeholder: 'String'
    restrictions: 'NumericalRestrictions'
    solutionRanges: 'NumericalSolutionRange'
    unit: 'String'
  }
  NumericalRestrictions: { // field return type name
    max: 'Int'
    min: 'Int'
  }
  NumericalSolutionRange: { // field return type name
    max: 'Float'
    min: 'Float'
  }
  Participant: { // field return type name
    avatar: 'String'
    avatarSettings: 'JSONObject'
    id: 'ID'
    isSelf: 'Boolean'
    participantGroups: 'ParticipantGroup'
    username: 'String'
  }
  ParticipantGroup: { // field return type name
    averageMemberScore: 'Float'
    code: 'Int'
    groupActivityScore: 'Float'
    id: 'ID'
    name: 'String'
    participants: 'LeaderboardEntry'
    score: 'Float'
  }
  ParticipantLearningData: { // field return type name
    course: 'Course'
    groupLeaderboard: 'GroupLeaderboardEntry'
    groupLeaderboardStatistics: 'LeaderboardStatistics'
    id: 'ID'
    leaderboard: 'LeaderboardEntry'
    leaderboardStatistics: 'LeaderboardStatistics'
    participant: 'Participant'
    participantToken: 'String'
    participation: 'Participation'
  }
  Participation: { // field return type name
    completedMicroSessions: 'String'
    course: 'Course'
    id: 'Int'
    isActive: 'Boolean'
    subscriptions: 'PublicSubscriptionData'
  }
  PublicSubscriptionData: { // field return type name
    endpoint: 'String'
    id: 'Int'
  }
  PushSubscription: { // field return type name
    auth: 'String'
    endpoint: 'String'
    expirationTime: 'Int'
    id: 'Int'
    p256dh: 'String'
  }
  Query: { // field return type name
    basicCourseInformation: 'Course'
    cockpitSession: 'Session'
    feedbacks: 'Feedback'
    getCourseOverviewData: 'ParticipantLearningData'
    groupActivityDetails: 'GroupActivityDetails'
    learningElement: 'LearningElement'
    microSession: 'MicroSession'
    participantGroups: 'ParticipantGroup'
    participations: 'Participation'
    pinnedFeedbacks: 'Session'
    question: 'Question'
    runningSessions: 'Session'
    self: 'Participant'
    session: 'Session'
    sessionEvaluation: 'SessionEvaluation'
    sessionLeaderboard: 'LeaderboardEntry'
    userCourses: 'Course'
    userProfile: 'User'
    userQuestions: 'Question'
    userSessions: 'Session'
  }
  Question: { // field return type name
    attachments: 'Attachment'
    content: 'String'
    createdAt: 'DateTime'
    hasAnswerFeedbacks: 'Boolean'
    hasSampleSolution: 'Boolean'
    id: 'Int'
    isArchived: 'Boolean'
    isDeleted: 'Boolean'
    name: 'String'
    questionData: 'QuestionData'
    tags: 'Tag'
    type: 'String'
    updatedAt: 'DateTime'
  }
  QuestionFeedback: { // field return type name
    correct: 'Boolean'
    feedback: 'String'
    ix: 'Int'
    value: 'String'
  }
  QuestionInstance: { // field return type name
    attachments: 'Attachment'
    evaluation: 'InstanceEvaluation'
    id: 'Int'
    questionData: 'QuestionData'
  }
  Session: { // field return type name
    accessMode: 'AccessMode'
    activeBlock: 'SessionBlock'
    blocks: 'SessionBlock'
    confusionFeedbacks: 'AggregatedConfusionFeedbacks'
    course: 'Course'
    createdAt: 'DateTime'
    displayName: 'String'
    feedbacks: 'Feedback'
    finishedAt: 'DateTime'
    id: 'ID'
    isAudienceInteractionActive: 'Boolean'
    isGamificationEnabled: 'Boolean'
    isModerationEnabled: 'Boolean'
    linkTo: 'String'
    name: 'String'
    namespace: 'String'
    startedAt: 'DateTime'
    status: 'SessionStatus'
  }
  SessionBlock: { // field return type name
    execution: 'Int'
    expiresAt: 'DateTime'
    id: 'Int'
    instances: 'QuestionInstance'
    order: 'Int'
    randomSelection: 'Boolean'
    status: 'SessionBlockStatus'
    timeLimit: 'Int'
  }
  SessionEvaluation: { // field return type name
    blocks: 'Block'
    id: 'ID'
    instanceResults: 'InstanceResults'
  }
  Statistics: { // field return type name
    max: 'Float'
    mean: 'Float'
    median: 'Float'
    min: 'Float'
    q1: 'Float'
    q3: 'Float'
    sd: 'Float'
  }
  Subscription: { // field return type name
    feedbackAdded: 'Feedback'
    feedbackCreated: 'Feedback'
    feedbackRemoved: 'Int'
    feedbackUpdated: 'Feedback'
    runningSessionUpdated: 'SessionBlock'
  }
  TabData: { // field return type name
    id: 'ID'
    name: 'String'
    questionIx: 'Int'
    status: 'String'
  }
  Tag: { // field return type name
    id: 'ID'
    name: 'String'
  }
  User: { // field return type name
    description: 'String'
    email: 'String'
    id: 'ID'
    isActive: 'Boolean'
    shortname: 'String'
  }
  EvaluationData: { // field return type name
    content: 'String'
    id: 'Int'
    name: 'String'
    type: 'String'
  }
  QuestionData: { // field return type name
    content: 'String'
    hasAnswerFeedbacks: 'Boolean'
    hasSampleSolution: 'Boolean'
    id: 'Int'
    isArchived: 'Boolean'
    isDeleted: 'Boolean'
    name: 'String'
    type: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    activateSessionBlock: { // args
      sessionBlockId: number; // Int!
      sessionId: string; // ID!
    }
    addConfusionTimestep: { // args
      difficulty: number; // Int!
      sessionId: string; // ID!
      speed: number; // Int!
    }
    changeSessionSettings: { // args
      id: string; // ID!
      isAudienceInteractionActive?: boolean | null; // Boolean
      isGamificationEnabled?: boolean | null; // Boolean
      isModerationEnabled?: boolean | null; // Boolean
    }
    createCourse: { // args
      color?: string | null; // String
      displayName?: string | null; // String
      name: string; // String!
    }
    createFeedback: { // args
      content: string; // String!
      sessionId: string; // ID!
    }
    createParticipantAndJoinCourse: { // args
      courseId: string; // ID!
      password: string; // String!
      pin: number; // Int!
      username: string; // String!
    }
    createParticipantGroup: { // args
      courseId: string; // ID!
      name: string; // String!
    }
    createSession: { // args
      blocks: NexusGenInputs['BlockInput'][]; // [BlockInput!]!
      courseId?: string | null; // String
      displayName?: string | null; // String
      isGamificationEnabled?: boolean | null; // Boolean
      name: string; // String!
    }
    deactivateSessionBlock: { // args
      sessionBlockId: number; // Int!
      sessionId: string; // ID!
    }
    deleteFeedback: { // args
      id: number; // Int!
    }
    deleteFeedbackResponse: { // args
      id: number; // Int!
    }
    deleteQuestion: { // args
      id?: number | null; // Int
    }
    endSession: { // args
      id: string; // ID!
    }
    joinCourse: { // args
      courseId: string; // ID!
    }
    joinCourseWithPin: { // args
      courseId: string; // ID!
      pin: number; // Int!
    }
    joinParticipantGroup: { // args
      code: number; // Int!
      courseId: string; // ID!
    }
    leaveCourse: { // args
      courseId: string; // ID!
    }
    leaveParticipantGroup: { // args
      courseId: string; // ID!
      groupId: string; // ID!
    }
    loginParticipant: { // args
      password: string; // String!
      username: string; // String!
    }
    loginUser: { // args
      email: string; // String!
      password: string; // String!
    }
    manipulateChoicesQuestion: { // args
      attachments?: Array<NexusGenInputs['AttachmentInput'] | null> | null; // [AttachmentInput]
      content?: string | null; // String
      hasAnswerFeedbacks?: boolean | null; // Boolean
      hasSampleSolution?: boolean | null; // Boolean
      id?: number | null; // Int
      name?: string | null; // String
      options?: NexusGenInputs['OptionsChoicesInput'] | null; // OptionsChoicesInput
      tags?: Array<string | null> | null; // [String]
      type?: string | null; // String
    }
    manipulateFREETEXTQuestion: { // args
      attachments?: Array<NexusGenInputs['AttachmentInput'] | null> | null; // [AttachmentInput]
      content?: string | null; // String
      hasAnswerFeedbacks?: boolean | null; // Boolean
      hasSampleSolution?: boolean | null; // Boolean
      id?: number | null; // Int
      name?: string | null; // String
      options?: NexusGenInputs['OptionsFreeTextInput'] | null; // OptionsFreeTextInput
      tags?: Array<string | null> | null; // [String]
      type?: string | null; // String
    }
    manipulateNUMERICALQuestion: { // args
      attachments?: Array<NexusGenInputs['AttachmentInput'] | null> | null; // [AttachmentInput]
      content?: string | null; // String
      hasAnswerFeedbacks?: boolean | null; // Boolean
      hasSampleSolution?: boolean | null; // Boolean
      id?: number | null; // Int
      name?: string | null; // String
      options?: NexusGenInputs['OptionsNumericalInput'] | null; // OptionsNumericalInput
      tags?: Array<string | null> | null; // [String]
      type?: string | null; // String
    }
    markMicroSessionCompleted: { // args
      courseId: string; // ID!
      id: string; // ID!
    }
    pinFeedback: { // args
      id: number; // Int!
      isPinned: boolean; // Boolean!
    }
    publishFeedback: { // args
      id: number; // Int!
      isPublished: boolean; // Boolean!
    }
    registerParticipantFromLTI: { // args
      courseId: string; // ID!
      participantId: string; // ID!
    }
    resolveFeedback: { // args
      id: number; // Int!
      isResolved: boolean; // Boolean!
    }
    respondToFeedback: { // args
      id: number; // Int!
      responseContent: string; // String!
    }
    respondToQuestionInstance: { // args
      courseId: string; // ID!
      id: number; // Int!
      response: NexusGenInputs['ResponseInput']; // ResponseInput!
    }
    startGroupActivity: { // args
      activityId: string; // ID!
      groupId: string; // ID!
    }
    startSession: { // args
      id: string; // ID!
    }
    submitGroupActivityDecisions: { // args
      activityInstanceId: number; // Int!
      decisions: NexusGenInputs['GroupActivityDecisionInput'][]; // [GroupActivityDecisionInput!]!
    }
    subscribeToPush: { // args
      courseId: string; // ID!
      subscriptionObject: NexusGenInputs['SubscriptionObjectInput']; // SubscriptionObjectInput!
    }
    updateParticipantProfile: { // args
      avatar?: string | null; // String
      avatarSettings?: NexusGenInputs['AvatarSettingsInput'] | null; // AvatarSettingsInput
      password?: string | null; // String
      username?: string | null; // String
    }
    upvoteFeedback: { // args
      feedbackId: number; // Int!
      increment: number; // Int!
    }
    voteFeedbackResponse: { // args
      id: number; // Int!
      incrementDownvote: number; // Int!
      incrementUpvote: number; // Int!
    }
  }
  Query: {
    basicCourseInformation: { // args
      courseId: string; // ID!
    }
    cockpitSession: { // args
      id: string; // ID!
    }
    feedbacks: { // args
      id: string; // ID!
    }
    getCourseOverviewData: { // args
      courseId: string; // ID!
    }
    groupActivityDetails: { // args
      activityId: string; // ID!
      groupId: string; // ID!
    }
    learningElement: { // args
      id: string; // ID!
    }
    microSession: { // args
      id: string; // ID!
    }
    participantGroups: { // args
      courseId: string; // ID!
    }
    participations: { // args
      endpoint?: string | null; // String
    }
    pinnedFeedbacks: { // args
      id: string; // ID!
    }
    question: { // args
      id: number; // Int!
    }
    runningSessions: { // args
      shortname: string; // String!
    }
    session: { // args
      id: string; // ID!
    }
    sessionEvaluation: { // args
      id: string; // ID!
    }
    sessionLeaderboard: { // args
      sessionId: string; // ID!
    }
  }
  Subscription: {
    feedbackAdded: { // args
      sessionId: string; // ID!
    }
    feedbackCreated: { // args
      sessionId: string; // ID!
    }
    feedbackRemoved: { // args
      sessionId: string; // ID!
    }
    feedbackUpdated: { // args
      sessionId: string; // ID!
    }
    runningSessionUpdated: { // args
      sessionId: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  EvaluationData: "ChoicesEvaluationData" | "FreeTextEvaluationData" | "NumericalEvaluationData"
  QuestionData: "ChoicesQuestionData" | "FreeTextQuestionData" | "NumericalQuestionData"
}

export interface NexusGenTypeInterfaces {
  ChoicesEvaluationData: "EvaluationData"
  ChoicesQuestionData: "QuestionData"
  FreeTextEvaluationData: "EvaluationData"
  FreeTextQuestionData: "QuestionData"
  NumericalEvaluationData: "EvaluationData"
  NumericalQuestionData: "QuestionData"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "EvaluationData" | "QuestionData";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * The nullability guard can be helpful, but is also a potentially expensive operation for lists.
     * We need to iterate the entire list to check for null items to guard against. Set this to true
     * to skip the null guard on a specific field if you know there's no potential for unsafe types.
     */
    skipNullGuard?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}